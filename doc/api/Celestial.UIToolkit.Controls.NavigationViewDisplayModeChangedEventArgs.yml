### YamlMime:ManagedReference
items:
- uid: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs
  commentId: T:Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs
  id: NavigationViewDisplayModeChangedEventArgs
  parent: Celestial.UIToolkit.Controls
  children:
  - Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.#ctor(Celestial.UIToolkit.Controls.NavigationViewDisplayMode,Celestial.UIToolkit.Controls.NavigationViewDisplayMode)
  - Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NewDisplayMode
  - Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.OldDisplayMode
  langs:
  - csharp
  - vb
  name: NavigationViewDisplayModeChangedEventArgs
  nameWithType: NavigationViewDisplayModeChangedEventArgs
  fullName: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs
  type: Class
  source:
    remote:
      path: src/Celestial.UIToolkit/Controls/NavigationView/NavigationViewDisplayModeChangedEventArgs.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: NavigationViewDisplayModeChangedEventArgs
    path: ../src/Celestial.UIToolkit/Controls/NavigationView/NavigationViewDisplayModeChangedEventArgs.cs
    startLine: 9
  assemblies:
  - Celestial.UIToolkit
  namespace: Celestial.UIToolkit.Controls
  summary: "\nProvides event data for the <xref href=\"Celestial.UIToolkit.Controls.NavigationView.DisplayModeChanged\" data-throw-if-not-resolved=\"false\"></xref> event.\nThis class cannot be inherited.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public sealed class NavigationViewDisplayModeChangedEventArgs : EventArgs
    content.vb: >-
      <Serializable>

      Public NotInheritable Class NavigationViewDisplayModeChangedEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.OldDisplayMode
  commentId: P:Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.OldDisplayMode
  id: OldDisplayMode
  parent: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs
  langs:
  - csharp
  - vb
  name: OldDisplayMode
  nameWithType: NavigationViewDisplayModeChangedEventArgs.OldDisplayMode
  fullName: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.OldDisplayMode
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit/Controls/NavigationView/NavigationViewDisplayModeChangedEventArgs.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: OldDisplayMode
    path: ../src/Celestial.UIToolkit/Controls/NavigationView/NavigationViewDisplayModeChangedEventArgs.cs
    startLine: 16
  assemblies:
  - Celestial.UIToolkit
  namespace: Celestial.UIToolkit.Controls
  summary: "\nGets the old display mode.\n"
  example: []
  syntax:
    content: public NavigationViewDisplayMode OldDisplayMode { get; }
    parameters: []
    return:
      type: Celestial.UIToolkit.Controls.NavigationViewDisplayMode
    content.vb: Public ReadOnly Property OldDisplayMode As NavigationViewDisplayMode
  overload: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.OldDisplayMode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NewDisplayMode
  commentId: P:Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NewDisplayMode
  id: NewDisplayMode
  parent: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs
  langs:
  - csharp
  - vb
  name: NewDisplayMode
  nameWithType: NavigationViewDisplayModeChangedEventArgs.NewDisplayMode
  fullName: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NewDisplayMode
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit/Controls/NavigationView/NavigationViewDisplayModeChangedEventArgs.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: NewDisplayMode
    path: ../src/Celestial.UIToolkit/Controls/NavigationView/NavigationViewDisplayModeChangedEventArgs.cs
    startLine: 21
  assemblies:
  - Celestial.UIToolkit
  namespace: Celestial.UIToolkit.Controls
  summary: "\nGets the new display mode.\n"
  example: []
  syntax:
    content: public NavigationViewDisplayMode NewDisplayMode { get; }
    parameters: []
    return:
      type: Celestial.UIToolkit.Controls.NavigationViewDisplayMode
    content.vb: Public ReadOnly Property NewDisplayMode As NavigationViewDisplayMode
  overload: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NewDisplayMode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.#ctor(Celestial.UIToolkit.Controls.NavigationViewDisplayMode,Celestial.UIToolkit.Controls.NavigationViewDisplayMode)
  commentId: M:Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.#ctor(Celestial.UIToolkit.Controls.NavigationViewDisplayMode,Celestial.UIToolkit.Controls.NavigationViewDisplayMode)
  id: '#ctor(Celestial.UIToolkit.Controls.NavigationViewDisplayMode,Celestial.UIToolkit.Controls.NavigationViewDisplayMode)'
  parent: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs
  langs:
  - csharp
  - vb
  name: NavigationViewDisplayModeChangedEventArgs(NavigationViewDisplayMode, NavigationViewDisplayMode)
  nameWithType: NavigationViewDisplayModeChangedEventArgs.NavigationViewDisplayModeChangedEventArgs(NavigationViewDisplayMode, NavigationViewDisplayMode)
  fullName: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NavigationViewDisplayModeChangedEventArgs(Celestial.UIToolkit.Controls.NavigationViewDisplayMode, Celestial.UIToolkit.Controls.NavigationViewDisplayMode)
  type: Constructor
  source:
    remote:
      path: src/Celestial.UIToolkit/Controls/NavigationView/NavigationViewDisplayModeChangedEventArgs.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: .ctor
    path: ../src/Celestial.UIToolkit/Controls/NavigationView/NavigationViewDisplayModeChangedEventArgs.cs
    startLine: 30
  assemblies:
  - Celestial.UIToolkit
  namespace: Celestial.UIToolkit.Controls
  summary: "\nInitializes a new instance of the\n<xref href=\"Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class with the specified\nevent data.\n"
  example: []
  syntax:
    content: public NavigationViewDisplayModeChangedEventArgs(NavigationViewDisplayMode oldDisplayMode, NavigationViewDisplayMode newDisplayMode)
    parameters:
    - id: oldDisplayMode
      type: Celestial.UIToolkit.Controls.NavigationViewDisplayMode
      description: The old display mode.
    - id: newDisplayMode
      type: Celestial.UIToolkit.Controls.NavigationViewDisplayMode
      description: The new display mode.
    content.vb: Public Sub New(oldDisplayMode As NavigationViewDisplayMode, newDisplayMode As NavigationViewDisplayMode)
  overload: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Celestial.UIToolkit.Controls.NavigationView.DisplayModeChanged
  commentId: E:Celestial.UIToolkit.Controls.NavigationView.DisplayModeChanged
  isExternal: true
- uid: Celestial.UIToolkit.Controls
  commentId: N:Celestial.UIToolkit.Controls
  name: Celestial.UIToolkit.Controls
  nameWithType: Celestial.UIToolkit.Controls
  fullName: Celestial.UIToolkit.Controls
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.OldDisplayMode*
  commentId: Overload:Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.OldDisplayMode
  name: OldDisplayMode
  nameWithType: NavigationViewDisplayModeChangedEventArgs.OldDisplayMode
  fullName: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.OldDisplayMode
- uid: Celestial.UIToolkit.Controls.NavigationViewDisplayMode
  commentId: T:Celestial.UIToolkit.Controls.NavigationViewDisplayMode
  parent: Celestial.UIToolkit.Controls
  name: NavigationViewDisplayMode
  nameWithType: NavigationViewDisplayMode
  fullName: Celestial.UIToolkit.Controls.NavigationViewDisplayMode
- uid: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NewDisplayMode*
  commentId: Overload:Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NewDisplayMode
  name: NewDisplayMode
  nameWithType: NavigationViewDisplayModeChangedEventArgs.NewDisplayMode
  fullName: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NewDisplayMode
- uid: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs
  commentId: T:Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs
  parent: Celestial.UIToolkit.Controls
  name: NavigationViewDisplayModeChangedEventArgs
  nameWithType: NavigationViewDisplayModeChangedEventArgs
  fullName: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs
- uid: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.#ctor*
  commentId: Overload:Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.#ctor
  name: NavigationViewDisplayModeChangedEventArgs
  nameWithType: NavigationViewDisplayModeChangedEventArgs.NavigationViewDisplayModeChangedEventArgs
  fullName: Celestial.UIToolkit.Controls.NavigationViewDisplayModeChangedEventArgs.NavigationViewDisplayModeChangedEventArgs
