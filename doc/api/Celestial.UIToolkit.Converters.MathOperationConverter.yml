### YamlMime:ManagedReference
items:
- uid: Celestial.UIToolkit.Converters.MathOperationConverter
  commentId: T:Celestial.UIToolkit.Converters.MathOperationConverter
  id: MathOperationConverter
  parent: Celestial.UIToolkit.Converters
  children:
  - Celestial.UIToolkit.Converters.MathOperationConverter.#ctor
  - Celestial.UIToolkit.Converters.MathOperationConverter.#ctor(Celestial.UIToolkit.Converters.MathOperator)
  - Celestial.UIToolkit.Converters.MathOperationConverter.Convert(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  - Celestial.UIToolkit.Converters.MathOperationConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  - Celestial.UIToolkit.Converters.MathOperationConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  - Celestial.UIToolkit.Converters.MathOperationConverter.Operator
  langs:
  - csharp
  - vb
  name: MathOperationConverter
  nameWithType: MathOperationConverter
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter
  type: Class
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: MathOperationConverter
    path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
    startLine: 17
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Converters
  summary: "\nA converter which performs the most basic mathematical operations\nbetween two values.\n"
  remarks: "\nNote that this converter will produce wrong values, or might loose precision\nfor very high numbers.\n"
  example: []
  syntax:
    content: >-
      [ValueConversion(typeof(IConvertible), typeof(IConvertible))]

      public class MathOperationConverter : ValueConverter<IConvertible, IConvertible>, IValueConverter, IMultiValueConverter
    content.vb: >-
      <ValueConversion(GetType(IConvertible), GetType(IConvertible))>

      Public Class MathOperationConverter

          Inherits ValueConverter(Of IConvertible, IConvertible)

          Implements IValueConverter, IMultiValueConverter
  inheritance:
  - System.Object
  - Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}
  implements:
  - System.Windows.Data.IValueConverter
  - System.Windows.Data.IMultiValueConverter
  inheritedMembers:
  - Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  - Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  - Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.Convert(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  - Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.ConvertBack(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Windows.Data.ValueConversionAttribute
    ctor: System.Windows.Data.ValueConversionAttribute.#ctor(System.Type,System.Type)
    arguments:
    - type: System.Type
      value: System.IConvertible
    - type: System.Type
      value: System.IConvertible
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.Operator
  commentId: P:Celestial.UIToolkit.Converters.MathOperationConverter.Operator
  id: Operator
  parent: Celestial.UIToolkit.Converters.MathOperationConverter
  langs:
  - csharp
  - vb
  name: Operator
  nameWithType: MathOperationConverter.Operator
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.Operator
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: Operator
    path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
    startLine: 24
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Converters
  summary: "\nGets or sets the operator for the operation.\n"
  example: []
  syntax:
    content: public MathOperator Operator { get; set; }
    parameters: []
    return:
      type: Celestial.UIToolkit.Converters.MathOperator
    content.vb: Public Property Operator As MathOperator
  overload: Celestial.UIToolkit.Converters.MathOperationConverter.Operator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.#ctor
  commentId: M:Celestial.UIToolkit.Converters.MathOperationConverter.#ctor
  id: '#ctor'
  parent: Celestial.UIToolkit.Converters.MathOperationConverter
  langs:
  - csharp
  - vb
  name: MathOperationConverter()
  nameWithType: MathOperationConverter.MathOperationConverter()
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.MathOperationConverter()
  type: Constructor
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: .ctor
    path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
    startLine: 29
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Converters
  summary: "\nInitializes a new instance of the <xref href=\"Celestial.UIToolkit.Converters.MathOperationConverter\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public MathOperationConverter()
    content.vb: Public Sub New
  overload: Celestial.UIToolkit.Converters.MathOperationConverter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.#ctor(Celestial.UIToolkit.Converters.MathOperator)
  commentId: M:Celestial.UIToolkit.Converters.MathOperationConverter.#ctor(Celestial.UIToolkit.Converters.MathOperator)
  id: '#ctor(Celestial.UIToolkit.Converters.MathOperator)'
  parent: Celestial.UIToolkit.Converters.MathOperationConverter
  langs:
  - csharp
  - vb
  name: MathOperationConverter(MathOperator)
  nameWithType: MathOperationConverter.MathOperationConverter(MathOperator)
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.MathOperationConverter(Celestial.UIToolkit.Converters.MathOperator)
  type: Constructor
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: .ctor
    path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
    startLine: 39
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Converters
  summary: "\nInitializes a new instance of the <xref href=\"Celestial.UIToolkit.Converters.MathOperationConverter\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified operator.\n"
  example: []
  syntax:
    content: public MathOperationConverter(MathOperator op)
    parameters:
    - id: op
      type: Celestial.UIToolkit.Converters.MathOperator
      description: "\nThe operator for the operation.\n"
    content.vb: Public Sub New(op As MathOperator)
  overload: Celestial.UIToolkit.Converters.MathOperationConverter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.Convert(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.MathOperationConverter.Convert(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  id: Convert(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  parent: Celestial.UIToolkit.Converters.MathOperationConverter
  langs:
  - csharp
  - vb
  name: Convert(IConvertible, Object, CultureInfo)
  nameWithType: MathOperationConverter.Convert(IConvertible, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.Convert(System.IConvertible, System.Object, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: Convert
    path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
    startLine: 54
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Converters
  summary: "\nPerforms the mathematical operation on the two values and returns the result.\n"
  example: []
  syntax:
    content: public override IConvertible Convert(IConvertible value, object parameter, CultureInfo culture)
    parameters:
    - id: value
      type: System.IConvertible
      description: The left-hand value in the mathematical operation.
    - id: parameter
      type: System.Object
      description: The right-hand value in the mathematical operation.
    - id: culture
      type: System.Globalization.CultureInfo
      description: The culture to use in the converter. Not used.
    return:
      type: System.IConvertible
      description: A <xref href="System.Windows.Visibility" data-throw-if-not-resolved="false"></xref> object depending on the <code data-dev-comment-type="paramref" class="paramref">value</code>.
    content.vb: Public Overrides Function Convert(value As IConvertible, parameter As Object, culture As CultureInfo) As IConvertible
  overridden: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.Convert(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  overload: Celestial.UIToolkit.Converters.MathOperationConverter.Convert*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThrown if <code data-dev-comment-type=\"paramref\" class=\"paramref\">parameter</code> is not of type <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.MathOperationConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  id: Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  parent: Celestial.UIToolkit.Converters.MathOperationConverter
  langs:
  - csharp
  - vb
  name: Convert(Object[], Type, Object, CultureInfo)
  nameWithType: MathOperationConverter.Convert(Object[], Type, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.Convert(System.Object[], System.Type, System.Object, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: Convert
    path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
    startLine: 104
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Converters
  summary: "\nPerforms the mathematical operation on all of the provided values.\nIn comparison to the single <xref href=\"System.Windows.Data.IValueConverter\" data-throw-if-not-resolved=\"false\"></xref>&apos;s Convert method,\nthis one doesn&apos;t use the <code data-dev-comment-type=\"paramref\" class=\"paramref\">parameter</code>,\nsince all numbers are provided by the <code data-dev-comment-type=\"paramref\" class=\"paramref\">values</code> parameter.\n"
  example: []
  syntax:
    content: public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)
    parameters:
    - id: values
      type: System.Object[]
      description: The values which are being added/subtracted/multiplied/divided.
    - id: targetType
      type: System.Type
      description: The target type of the conversion.
    - id: parameter
      type: System.Object
      description: Not used.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Not used.
    return:
      type: System.Object
      description: The result of the mathematical operation.
    content.vb: Public Function Convert(values As Object(), targetType As Type, parameter As Object, culture As CultureInfo) As Object
  overload: Celestial.UIToolkit.Converters.MathOperationConverter.Convert*
  implements:
  - System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  nameWithType.vb: MathOperationConverter.Convert(Object(), Type, Object, CultureInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Celestial.UIToolkit.Converters.MathOperationConverter.Convert(System.Object(), System.Type, System.Object, System.Globalization.CultureInfo)
  name.vb: Convert(Object(), Type, Object, CultureInfo)
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.MathOperationConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  id: ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  parent: Celestial.UIToolkit.Converters.MathOperationConverter
  langs:
  - csharp
  - vb
  name: ConvertBack(Object, Type[], Object, CultureInfo)
  nameWithType: MathOperationConverter.ConvertBack(Object, Type[], Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.ConvertBack(System.Object, System.Type[], System.Object, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: ConvertBack
    path: src/Celestial.UIToolkit.Core/Converters/MathOperationConverter.cs
    startLine: 132
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Converters
  summary: "\nThrows <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)
    parameters:
    - id: value
      type: System.Object
      description: Not supported.
    - id: targetTypes
      type: System.Type[]
      description: Not supported.
    - id: parameter
      type: System.Object
      description: Not supported.
    - id: culture
      type: System.Globalization.CultureInfo
      description: Not supported.
    return:
      type: System.Object[]
      description: Not supported.
    content.vb: Public Function ConvertBack(value As Object, targetTypes As Type(), parameter As Object, culture As CultureInfo) As Object()
  overload: Celestial.UIToolkit.Converters.MathOperationConverter.ConvertBack*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
  implements:
  - System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  nameWithType.vb: MathOperationConverter.ConvertBack(Object, Type(), Object, CultureInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Celestial.UIToolkit.Converters.MathOperationConverter.ConvertBack(System.Object, System.Type(), System.Object, System.Globalization.CultureInfo)
  name.vb: ConvertBack(Object, Type(), Object, CultureInfo)
references:
- uid: Celestial.UIToolkit.Converters
  commentId: N:Celestial.UIToolkit.Converters
  name: Celestial.UIToolkit.Converters
  nameWithType: Celestial.UIToolkit.Converters
  fullName: Celestial.UIToolkit.Converters
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}
  commentId: T:Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}
  parent: Celestial.UIToolkit.Converters
  definition: Celestial.UIToolkit.Converters.ValueConverter`2
  name: ValueConverter<IConvertible, IConvertible>
  nameWithType: ValueConverter<IConvertible, IConvertible>
  fullName: Celestial.UIToolkit.Converters.ValueConverter<System.IConvertible, System.IConvertible>
  nameWithType.vb: ValueConverter(Of IConvertible, IConvertible)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of System.IConvertible, System.IConvertible)
  name.vb: ValueConverter(Of IConvertible, IConvertible)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2
    name: ValueConverter
    nameWithType: ValueConverter
    fullName: Celestial.UIToolkit.Converters.ValueConverter
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IConvertible
    name: IConvertible
    nameWithType: IConvertible
    fullName: System.IConvertible
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IConvertible
    name: IConvertible
    nameWithType: IConvertible
    fullName: System.IConvertible
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2
    name: ValueConverter
    nameWithType: ValueConverter
    fullName: Celestial.UIToolkit.Converters.ValueConverter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IConvertible
    name: IConvertible
    nameWithType: IConvertible
    fullName: System.IConvertible
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IConvertible
    name: IConvertible
    nameWithType: IConvertible
    fullName: System.IConvertible
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Data.IValueConverter
  commentId: T:System.Windows.Data.IValueConverter
  parent: System.Windows.Data
  isExternal: true
  name: IValueConverter
  nameWithType: IValueConverter
  fullName: System.Windows.Data.IValueConverter
- uid: System.Windows.Data.IMultiValueConverter
  commentId: T:System.Windows.Data.IMultiValueConverter
  parent: System.Windows.Data
  isExternal: true
  name: IMultiValueConverter
  nameWithType: IMultiValueConverter
  fullName: System.Windows.Data.IMultiValueConverter
- uid: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  parent: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}
  definition: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  name: Convert(Object, Type, Object, CultureInfo)
  nameWithType: ValueConverter<IConvertible, IConvertible>.Convert(Object, Type, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.ValueConverter<System.IConvertible, System.IConvertible>.Convert(System.Object, System.Type, System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: ValueConverter(Of IConvertible, IConvertible).Convert(Object, Type, Object, CultureInfo)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of System.IConvertible, System.IConvertible).Convert(System.Object, System.Type, System.Object, System.Globalization.CultureInfo)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: ValueConverter<IConvertible, IConvertible>.Convert
    fullName: Celestial.UIToolkit.Converters.ValueConverter<System.IConvertible, System.IConvertible>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: ValueConverter(Of IConvertible, IConvertible).Convert
    fullName: Celestial.UIToolkit.Converters.ValueConverter(Of System.IConvertible, System.IConvertible).Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  parent: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}
  definition: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  name: ConvertBack(Object, Type, Object, CultureInfo)
  nameWithType: ValueConverter<IConvertible, IConvertible>.ConvertBack(Object, Type, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.ValueConverter<System.IConvertible, System.IConvertible>.ConvertBack(System.Object, System.Type, System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: ValueConverter(Of IConvertible, IConvertible).ConvertBack(Object, Type, Object, CultureInfo)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of System.IConvertible, System.IConvertible).ConvertBack(System.Object, System.Type, System.Object, System.Globalization.CultureInfo)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: ValueConverter<IConvertible, IConvertible>.ConvertBack
    fullName: Celestial.UIToolkit.Converters.ValueConverter<System.IConvertible, System.IConvertible>.ConvertBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: ValueConverter(Of IConvertible, IConvertible).ConvertBack
    fullName: Celestial.UIToolkit.Converters.ValueConverter(Of System.IConvertible, System.IConvertible).ConvertBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.Convert(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.Convert(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  parent: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}
  definition: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)
  name: Convert(IConvertible, Object, CultureInfo)
  nameWithType: ValueConverter<IConvertible, IConvertible>.Convert(IConvertible, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.ValueConverter<System.IConvertible, System.IConvertible>.Convert(System.IConvertible, System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: ValueConverter(Of IConvertible, IConvertible).Convert(IConvertible, Object, CultureInfo)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of System.IConvertible, System.IConvertible).Convert(System.IConvertible, System.Object, System.Globalization.CultureInfo)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: ValueConverter<IConvertible, IConvertible>.Convert
    fullName: Celestial.UIToolkit.Converters.ValueConverter<System.IConvertible, System.IConvertible>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IConvertible
    name: IConvertible
    nameWithType: IConvertible
    fullName: System.IConvertible
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: ValueConverter(Of IConvertible, IConvertible).Convert
    fullName: Celestial.UIToolkit.Converters.ValueConverter(Of System.IConvertible, System.IConvertible).Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IConvertible
    name: IConvertible
    nameWithType: IConvertible
    fullName: System.IConvertible
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.ConvertBack(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}.ConvertBack(System.IConvertible,System.Object,System.Globalization.CultureInfo)
  parent: Celestial.UIToolkit.Converters.ValueConverter{System.IConvertible,System.IConvertible}
  definition: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)
  name: ConvertBack(IConvertible, Object, CultureInfo)
  nameWithType: ValueConverter<IConvertible, IConvertible>.ConvertBack(IConvertible, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.ValueConverter<System.IConvertible, System.IConvertible>.ConvertBack(System.IConvertible, System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: ValueConverter(Of IConvertible, IConvertible).ConvertBack(IConvertible, Object, CultureInfo)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of System.IConvertible, System.IConvertible).ConvertBack(System.IConvertible, System.Object, System.Globalization.CultureInfo)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: ValueConverter<IConvertible, IConvertible>.ConvertBack
    fullName: Celestial.UIToolkit.Converters.ValueConverter<System.IConvertible, System.IConvertible>.ConvertBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IConvertible
    name: IConvertible
    nameWithType: IConvertible
    fullName: System.IConvertible
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: ValueConverter(Of IConvertible, IConvertible).ConvertBack
    fullName: Celestial.UIToolkit.Converters.ValueConverter(Of System.IConvertible, System.IConvertible).ConvertBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IConvertible
    name: IConvertible
    nameWithType: IConvertible
    fullName: System.IConvertible
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Celestial.UIToolkit.Converters.ValueConverter`2
  commentId: T:Celestial.UIToolkit.Converters.ValueConverter`2
  name: ValueConverter<TValue, TTarget>
  nameWithType: ValueConverter<TValue, TTarget>
  fullName: Celestial.UIToolkit.Converters.ValueConverter<TValue, TTarget>
  nameWithType.vb: ValueConverter(Of TValue, TTarget)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of TValue, TTarget)
  name.vb: ValueConverter(Of TValue, TTarget)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2
    name: ValueConverter
    nameWithType: ValueConverter
    fullName: Celestial.UIToolkit.Converters.ValueConverter
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2
    name: ValueConverter
    nameWithType: ValueConverter
    fullName: Celestial.UIToolkit.Converters.ValueConverter
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Data
  commentId: N:System.Windows.Data
  isExternal: true
  name: System.Windows.Data
  nameWithType: System.Windows.Data
  fullName: System.Windows.Data
- uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  isExternal: true
  name: Convert(Object, Type, Object, CultureInfo)
  nameWithType: ValueConverter<TValue, TTarget>.Convert(Object, Type, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.ValueConverter<TValue, TTarget>.Convert(System.Object, System.Type, System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: ValueConverter(Of TValue, TTarget).Convert(Object, Type, Object, CultureInfo)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of TValue, TTarget).Convert(System.Object, System.Type, System.Object, System.Globalization.CultureInfo)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: ValueConverter<TValue, TTarget>.Convert
    fullName: Celestial.UIToolkit.Converters.ValueConverter<TValue, TTarget>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: ValueConverter(Of TValue, TTarget).Convert
    fullName: Celestial.UIToolkit.Converters.ValueConverter(Of TValue, TTarget).Convert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
  isExternal: true
  name: ConvertBack(Object, Type, Object, CultureInfo)
  nameWithType: ValueConverter<TValue, TTarget>.ConvertBack(Object, Type, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.ValueConverter<TValue, TTarget>.ConvertBack(System.Object, System.Type, System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: ValueConverter(Of TValue, TTarget).ConvertBack(Object, Type, Object, CultureInfo)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of TValue, TTarget).ConvertBack(System.Object, System.Type, System.Object, System.Globalization.CultureInfo)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: ValueConverter<TValue, TTarget>.ConvertBack
    fullName: Celestial.UIToolkit.Converters.ValueConverter<TValue, TTarget>.ConvertBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: ValueConverter(Of TValue, TTarget).ConvertBack
    fullName: Celestial.UIToolkit.Converters.ValueConverter(Of TValue, TTarget).ConvertBack
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.ValueConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)
  isExternal: true
  name: Convert(TValue, Object, CultureInfo)
  nameWithType: ValueConverter<TValue, TTarget>.Convert(TValue, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.ValueConverter<TValue, TTarget>.Convert(TValue, System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: ValueConverter(Of TValue, TTarget).Convert(TValue, Object, CultureInfo)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of TValue, TTarget).Convert(TValue, System.Object, System.Globalization.CultureInfo)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: ValueConverter<TValue, TTarget>.Convert
    fullName: Celestial.UIToolkit.Converters.ValueConverter<TValue, TTarget>.Convert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: ValueConverter(Of TValue, TTarget).Convert
    fullName: Celestial.UIToolkit.Converters.ValueConverter(Of TValue, TTarget).Convert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)
  commentId: M:Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)
  isExternal: true
  name: ConvertBack(TTarget, Object, CultureInfo)
  nameWithType: ValueConverter<TValue, TTarget>.ConvertBack(TTarget, Object, CultureInfo)
  fullName: Celestial.UIToolkit.Converters.ValueConverter<TValue, TTarget>.ConvertBack(TTarget, System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: ValueConverter(Of TValue, TTarget).ConvertBack(TTarget, Object, CultureInfo)
  fullName.vb: Celestial.UIToolkit.Converters.ValueConverter(Of TValue, TTarget).ConvertBack(TTarget, System.Object, System.Globalization.CultureInfo)
  spec.csharp:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: ValueConverter<TValue, TTarget>.ConvertBack
    fullName: Celestial.UIToolkit.Converters.ValueConverter<TValue, TTarget>.ConvertBack
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Converters.ValueConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: ValueConverter(Of TValue, TTarget).ConvertBack
    fullName: Celestial.UIToolkit.Converters.ValueConverter(Of TValue, TTarget).ConvertBack
  - name: (
    nameWithType: (
    fullName: (
  - name: TTarget
    nameWithType: TTarget
    fullName: TTarget
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.Operator*
  commentId: Overload:Celestial.UIToolkit.Converters.MathOperationConverter.Operator
  name: Operator
  nameWithType: MathOperationConverter.Operator
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.Operator
- uid: Celestial.UIToolkit.Converters.MathOperator
  commentId: T:Celestial.UIToolkit.Converters.MathOperator
  parent: Celestial.UIToolkit.Converters
  name: MathOperator
  nameWithType: MathOperator
  fullName: Celestial.UIToolkit.Converters.MathOperator
- uid: Celestial.UIToolkit.Converters.MathOperationConverter
  commentId: T:Celestial.UIToolkit.Converters.MathOperationConverter
  name: MathOperationConverter
  nameWithType: MathOperationConverter
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.#ctor*
  commentId: Overload:Celestial.UIToolkit.Converters.MathOperationConverter.#ctor
  name: MathOperationConverter
  nameWithType: MathOperationConverter.MathOperationConverter
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.MathOperationConverter
- uid: System.Windows.Visibility
  commentId: T:System.Windows.Visibility
  parent: System.Windows
  isExternal: true
  name: Visibility
  nameWithType: Visibility
  fullName: System.Windows.Visibility
- uid: System.IConvertible
  commentId: T:System.IConvertible
  parent: System
  isExternal: true
  name: IConvertible
  nameWithType: IConvertible
  fullName: System.IConvertible
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.Convert*
  commentId: Overload:Celestial.UIToolkit.Converters.MathOperationConverter.Convert
  name: Convert
  nameWithType: MathOperationConverter.Convert
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.Convert
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows
  commentId: N:System.Windows
  isExternal: true
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  commentId: M:System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: true
  name: Convert(Object[], Type, Object, CultureInfo)
  nameWithType: IMultiValueConverter.Convert(Object[], Type, Object, CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.Convert(System.Object[], System.Type, System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: IMultiValueConverter.Convert(Object(), Type, Object, CultureInfo)
  fullName.vb: System.Windows.Data.IMultiValueConverter.Convert(System.Object(), System.Type, System.Object, System.Globalization.CultureInfo)
  name.vb: Convert(Object(), Type, Object, CultureInfo)
  spec.csharp:
  - uid: System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: IMultiValueConverter.Convert
    fullName: System.Windows.Data.IMultiValueConverter.Convert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Data.IMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)
    name: Convert
    nameWithType: IMultiValueConverter.Convert
    fullName: System.Windows.Data.IMultiValueConverter.Convert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Celestial.UIToolkit.Converters.MathOperationConverter.ConvertBack*
  commentId: Overload:Celestial.UIToolkit.Converters.MathOperationConverter.ConvertBack
  name: ConvertBack
  nameWithType: MathOperationConverter.ConvertBack
  fullName: Celestial.UIToolkit.Converters.MathOperationConverter.ConvertBack
- uid: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  commentId: M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
  parent: System.Windows.Data.IMultiValueConverter
  isExternal: true
  name: ConvertBack(Object, Type[], Object, CultureInfo)
  nameWithType: IMultiValueConverter.ConvertBack(Object, Type[], Object, CultureInfo)
  fullName: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object, System.Type[], System.Object, System.Globalization.CultureInfo)
  nameWithType.vb: IMultiValueConverter.ConvertBack(Object, Type(), Object, CultureInfo)
  fullName.vb: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object, System.Type(), System.Object, System.Globalization.CultureInfo)
  name.vb: ConvertBack(Object, Type(), Object, CultureInfo)
  spec.csharp:
  - uid: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: IMultiValueConverter.ConvertBack
    fullName: System.Windows.Data.IMultiValueConverter.ConvertBack
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)
    name: ConvertBack
    nameWithType: IMultiValueConverter.ConvertBack
    fullName: System.Windows.Data.IMultiValueConverter.ConvertBack
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type[]
  isExternal: true
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullName.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
