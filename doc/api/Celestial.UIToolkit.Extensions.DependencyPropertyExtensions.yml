### YamlMime:ManagedReference
items:
- uid: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions
  commentId: T:Celestial.UIToolkit.Extensions.DependencyPropertyExtensions
  id: DependencyPropertyExtensions
  parent: Celestial.UIToolkit.Extensions
  children:
  - Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.HasLocalValue(System.Windows.DependencyProperty,System.Windows.DependencyObject)
  - Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsDependencyPropertySet(System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsSet(System.Windows.DependencyProperty,System.Windows.DependencyObject)
  langs:
  - csharp
  - vb
  name: DependencyPropertyExtensions
  nameWithType: DependencyPropertyExtensions
  fullName: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions
  type: Class
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Extensions/DependencyPropertyExtensions.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: DependencyPropertyExtensions
    path: src/Celestial.UIToolkit.Core/Extensions/DependencyPropertyExtensions.cs
    startLine: 9
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Extensions
  summary: "\nProvides extension methods for the <xref href=\"System.Windows.DependencyProperty\" data-throw-if-not-resolved=\"false\"></xref> type.\n"
  example: []
  syntax:
    content: public static class DependencyPropertyExtensions
    content.vb: Public Module DependencyPropertyExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.HasLocalValue(System.Windows.DependencyProperty,System.Windows.DependencyObject)
  commentId: M:Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.HasLocalValue(System.Windows.DependencyProperty,System.Windows.DependencyObject)
  id: HasLocalValue(System.Windows.DependencyProperty,System.Windows.DependencyObject)
  isExtensionMethod: true
  parent: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions
  langs:
  - csharp
  - vb
  name: HasLocalValue(DependencyProperty, DependencyObject)
  nameWithType: DependencyPropertyExtensions.HasLocalValue(DependencyProperty, DependencyObject)
  fullName: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.HasLocalValue(System.Windows.DependencyProperty, System.Windows.DependencyObject)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Extensions/DependencyPropertyExtensions.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: HasLocalValue
    path: src/Celestial.UIToolkit.Core/Extensions/DependencyPropertyExtensions.cs
    startLine: 22
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Extensions
  summary: "\nChecks if the dependency property&apos;s local value is set for the specified\ndependency object.\n"
  example: []
  syntax:
    content: public static bool HasLocalValue(this DependencyProperty dp, DependencyObject depObj)
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: The <xref href="System.Windows.DependencyProperty" data-throw-if-not-resolved="false"></xref>.
    - id: depObj
      type: System.Windows.DependencyObject
      description: A <xref href="System.Windows.DependencyObject" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if the dependency property is set for the specified dependency object;\n<code>false</code> if not.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasLocalValue(dp As DependencyProperty, depObj As DependencyObject) As Boolean
  overload: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.HasLocalValue*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsSet(System.Windows.DependencyProperty,System.Windows.DependencyObject)
  commentId: M:Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsSet(System.Windows.DependencyProperty,System.Windows.DependencyObject)
  id: IsSet(System.Windows.DependencyProperty,System.Windows.DependencyObject)
  isExtensionMethod: true
  parent: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions
  langs:
  - csharp
  - vb
  name: IsSet(DependencyProperty, DependencyObject)
  nameWithType: DependencyPropertyExtensions.IsSet(DependencyProperty, DependencyObject)
  fullName: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsSet(System.Windows.DependencyProperty, System.Windows.DependencyObject)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Extensions/DependencyPropertyExtensions.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: IsSet
    path: src/Celestial.UIToolkit.Core/Extensions/DependencyPropertyExtensions.cs
    startLine: 39
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Extensions
  summary: "\nReturns a value indicating whether the dependency property has a local value\nor if its current value is not its default value.\n"
  example: []
  syntax:
    content: public static bool IsSet(this DependencyProperty dp, DependencyObject depObj)
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: The <xref href="System.Windows.DependencyProperty" data-throw-if-not-resolved="false"></xref>.
    - id: depObj
      type: System.Windows.DependencyObject
      description: A <xref href="System.Windows.DependencyObject" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: "\ntrue if the dependency property can be treated as set;\nfalse if not.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsSet(dp As DependencyProperty, depObj As DependencyObject) As Boolean
  overload: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsSet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsDependencyPropertySet(System.Windows.DependencyObject,System.Windows.DependencyProperty)
  commentId: M:Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsDependencyPropertySet(System.Windows.DependencyObject,System.Windows.DependencyProperty)
  id: IsDependencyPropertySet(System.Windows.DependencyObject,System.Windows.DependencyProperty)
  isExtensionMethod: true
  parent: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions
  langs:
  - csharp
  - vb
  name: IsDependencyPropertySet(DependencyObject, DependencyProperty)
  nameWithType: DependencyPropertyExtensions.IsDependencyPropertySet(DependencyObject, DependencyProperty)
  fullName: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsDependencyPropertySet(System.Windows.DependencyObject, System.Windows.DependencyProperty)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Extensions/DependencyPropertyExtensions.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: IsDependencyPropertySet
    path: src/Celestial.UIToolkit.Core/Extensions/DependencyPropertyExtensions.cs
    startLine: 57
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Extensions
  summary: "\nChecks if the dependency property&apos;s local value is set for the specified\ndependency object.\n"
  example: []
  syntax:
    content: public static bool IsDependencyPropertySet(this DependencyObject depObj, DependencyProperty dp)
    parameters:
    - id: depObj
      type: System.Windows.DependencyObject
      description: A <xref href="System.Windows.DependencyObject" data-throw-if-not-resolved="false"></xref>.
    - id: dp
      type: System.Windows.DependencyProperty
      description: The <xref href="System.Windows.DependencyProperty" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: "\n<code>true</code>, if the dependency property is set for the specified dependency object;\n<code>false</code> if not.\n"
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsDependencyPropertySet(depObj As DependencyObject, dp As DependencyProperty) As Boolean
  overload: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsDependencyPropertySet*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Windows.DependencyProperty
  commentId: T:System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: true
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: Celestial.UIToolkit.Extensions
  commentId: N:Celestial.UIToolkit.Extensions
  name: Celestial.UIToolkit.Extensions
  nameWithType: Celestial.UIToolkit.Extensions
  fullName: Celestial.UIToolkit.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows
  commentId: N:System.Windows
  isExternal: true
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Windows.DependencyObject
  commentId: T:System.Windows.DependencyObject
  parent: System.Windows
  isExternal: true
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.HasLocalValue*
  commentId: Overload:Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.HasLocalValue
  name: HasLocalValue
  nameWithType: DependencyPropertyExtensions.HasLocalValue
  fullName: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.HasLocalValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsSet*
  commentId: Overload:Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsSet
  name: IsSet
  nameWithType: DependencyPropertyExtensions.IsSet
  fullName: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsSet
- uid: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsDependencyPropertySet*
  commentId: Overload:Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsDependencyPropertySet
  name: IsDependencyPropertySet
  nameWithType: DependencyPropertyExtensions.IsDependencyPropertySet
  fullName: Celestial.UIToolkit.Extensions.DependencyPropertyExtensions.IsDependencyPropertySet
