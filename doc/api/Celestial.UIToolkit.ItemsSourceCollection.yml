### YamlMime:ManagedReference
items:
- uid: Celestial.UIToolkit.ItemsSourceCollection
  commentId: T:Celestial.UIToolkit.ItemsSourceCollection
  id: ItemsSourceCollection
  parent: Celestial.UIToolkit
  children:
  - Celestial.UIToolkit.ItemsSourceCollection.#ctor
  - Celestial.UIToolkit.ItemsSourceCollection.Add(System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.Clear
  - Celestial.UIToolkit.ItemsSourceCollection.CollectionChanged
  - Celestial.UIToolkit.ItemsSourceCollection.Contains(System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.CopyTo(System.Array,System.Int32)
  - Celestial.UIToolkit.ItemsSourceCollection.Count
  - Celestial.UIToolkit.ItemsSourceCollection.GetElementAt(System.Int32)
  - Celestial.UIToolkit.ItemsSourceCollection.GetEnumerator
  - Celestial.UIToolkit.ItemsSourceCollection.HasEnumerableItemsSource
  - Celestial.UIToolkit.ItemsSourceCollection.IndexOf(System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.Insert(System.Int32,System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.IsFixedSize
  - Celestial.UIToolkit.ItemsSourceCollection.IsReadOnly
  - Celestial.UIToolkit.ItemsSourceCollection.IsSynchronized
  - Celestial.UIToolkit.ItemsSourceCollection.IsUsingItemsSource
  - Celestial.UIToolkit.ItemsSourceCollection.Item(System.Int32)
  - Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
  - Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  - Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged
  - Celestial.UIToolkit.ItemsSourceCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  - Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged(System.String)
  - Celestial.UIToolkit.ItemsSourceCollection.Remove(System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.RemoveAt(System.Int32)
  - Celestial.UIToolkit.ItemsSourceCollection.SyncRoot
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Add(System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Clear
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Contains(System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#CopyTo(System.Object[],System.Int32)
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Count
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Remove(System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#IndexOf(System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Insert(System.Int32,System.Object)
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Item(System.Int32)
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#RemoveAt(System.Int32)
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IEnumerable#GetEnumerator
  - Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  - vb
  name: ItemsSourceCollection
  nameWithType: ItemsSourceCollection
  fullName: Celestial.UIToolkit.ItemsSourceCollection
  type: Class
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: ItemsSourceCollection
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 18
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nA collection which can retrieve its items from an items source, if specified.\nIf not, it behaves like a normal collection to which any item can be added.\n"
  example: []
  syntax:
    content: 'public class ItemsSourceCollection : IList, ICollection, IList<object>, ICollection<object>, IEnumerable<object>, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged'
    content.vb: >-
      Public Class ItemsSourceCollection

          Implements IList, ICollection, IList(Of Object), ICollection(Of Object), IEnumerable(Of Object), IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged
  seealso:
  - linkId: Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
    commentId: P:Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.Generic.IList{System.Object}
  - System.Collections.Generic.ICollection{System.Object}
  - System.Collections.Generic.IEnumerable{System.Object}
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.ComponentModel.INotifyPropertyChanged
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Int32)
  - System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Int32)
  - System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Int32)
  - System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Int32)
  - System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(System.Object)
  - System.Collections.Generic.ICollection{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.IEnumerable{System.Object})
  - System.Collections.Generic.IList{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Func{System.Object,System.Boolean})
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Celestial.UIToolkit.ItemsSourceCollection.CollectionChanged
  commentId: E:Celestial.UIToolkit.ItemsSourceCollection.CollectionChanged
  id: CollectionChanged
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: ItemsSourceCollection.CollectionChanged
  fullName: Celestial.UIToolkit.ItemsSourceCollection.CollectionChanged
  type: Event
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: CollectionChanged
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 33
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nOccurs when either the internal collection or the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> changes.\nThe <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> must implement <xref href=\"System.Collections.Specialized.INotifyCollectionChanged\" data-throw-if-not-resolved=\"false\"></xref>\nfor this event to work.\n"
  example: []
  syntax:
    content: public event NotifyCollectionChangedEventHandler CollectionChanged
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    content.vb: Public Event CollectionChanged As NotifyCollectionChangedEventHandler
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged
  commentId: E:Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged
  id: PropertyChanged
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: ItemsSourceCollection.PropertyChanged
  fullName: Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged
  type: Event
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: PropertyChanged
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 38
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nOccurs when a property value changes.\n"
  example: []
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.IsUsingItemsSource
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.IsUsingItemsSource
  id: IsUsingItemsSource
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IsUsingItemsSource
  nameWithType: ItemsSourceCollection.IsUsingItemsSource
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IsUsingItemsSource
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: IsUsingItemsSource
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 44
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets a value indicating whether the collection is currently\nbased on an items source provided by the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> property.\n"
  example: []
  syntax:
    content: public bool IsUsingItemsSource { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsUsingItemsSource As Boolean
  overload: Celestial.UIToolkit.ItemsSourceCollection.IsUsingItemsSource*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.HasEnumerableItemsSource
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.HasEnumerableItemsSource
  id: HasEnumerableItemsSource
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: HasEnumerableItemsSource
  nameWithType: ItemsSourceCollection.HasEnumerableItemsSource
  fullName: Celestial.UIToolkit.ItemsSourceCollection.HasEnumerableItemsSource
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: HasEnumerableItemsSource
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 54
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets a value indicating whether the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> implements\nthe <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> interface.\n"
  remarks: "\nNote that the non-generic <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> interface is tested by this\nproperty.\n"
  example: []
  syntax:
    content: protected bool HasEnumerableItemsSource { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Protected ReadOnly Property HasEnumerableItemsSource As Boolean
  overload: Celestial.UIToolkit.ItemsSourceCollection.HasEnumerableItemsSource*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
  id: ItemsSource
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: ItemsSource
  nameWithType: ItemsSourceCollection.ItemsSource
  fullName: Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: ItemsSource
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 63
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets or sets an object from which this collection retrieves its items.\n"
  example: []
  syntax:
    content: public object ItemsSource { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Property ItemsSource As Object
  overload: Celestial.UIToolkit.ItemsSourceCollection.ItemsSource*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown if this property is set while the collection contains any items which do not\ncome from another items source.\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.Item(System.Int32)
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ItemsSourceCollection.Item[Int32]
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: this[]
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 94
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets the element at the specified index, or\nsets the item at the specified index within the current collection, if\nno <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> is set.\n"
  example: []
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    return:
      type: System.Object
      description: "\nThe element at the specified index in the collection, if <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>\nis null.\nIf <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, returns the element\nat the specified index from the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> is set, but does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>,\nthis will return the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>, as long as the <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code>\nis 0.\n"
    content.vb: Public Property Item(index As Integer) As Object
  overload: Celestial.UIToolkit.ItemsSourceCollection.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown if an attempt to set this property was made, while the collection had an active\n<xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  implements:
  - System.Collections.IList.Item(System.Int32)
  nameWithType.vb: ItemsSourceCollection.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Celestial.UIToolkit.ItemsSourceCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Celestial.UIToolkit.ItemsSourceCollection.Count
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.Count
  id: Count
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ItemsSourceCollection.Count
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Count
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: Count
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 113
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets the number of elements in this collection or an active <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>\nwhich implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> is set, but does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>,\nthis returns 1.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Celestial.UIToolkit.ItemsSourceCollection.Count*
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.IsReadOnly
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.IsReadOnly
  id: IsReadOnly
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ItemsSourceCollection.IsReadOnly
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: IsReadOnly
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 139
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets a value indicating whether the collection is currently read-only,\nmeaning that any methods which modify it will throw an exception.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Celestial.UIToolkit.ItemsSourceCollection.IsReadOnly*
  implements:
  - System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.IsFixedSize
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.IsFixedSize
  id: IsFixedSize
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IsFixedSize
  nameWithType: ItemsSourceCollection.IsFixedSize
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IsFixedSize
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: IsFixedSize
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 144
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets a value indicating whether the collection has a fixed size.\n"
  example: []
  syntax:
    content: public bool IsFixedSize { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFixedSize As Boolean
  overload: Celestial.UIToolkit.ItemsSourceCollection.IsFixedSize*
  implements:
  - System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.SyncRoot
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.SyncRoot
  id: SyncRoot
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: SyncRoot
  nameWithType: ItemsSourceCollection.SyncRoot
  fullName: Celestial.UIToolkit.ItemsSourceCollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: SyncRoot
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 155
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets an object which can be used for cross-thread synchronization.\nAccessing this property while an <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> is set will\nthrow a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public object SyncRoot { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property SyncRoot As Object
  overload: Celestial.UIToolkit.ItemsSourceCollection.SyncRoot*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\nThrown when this property is accessed while the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> is set to a \nvalid value.\n"
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.IsSynchronized
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.IsSynchronized
  id: IsSynchronized
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IsSynchronized
  nameWithType: ItemsSourceCollection.IsSynchronized
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: IsSynchronized
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 171
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets a value which indicates whether the collection is synchronized.\nThis is not the case. This returns false.\n"
  example: []
  syntax:
    content: public bool IsSynchronized { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSynchronized As Boolean
  overload: Celestial.UIToolkit.ItemsSourceCollection.IsSynchronized*
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.#ctor
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.#ctor
  id: '#ctor'
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: ItemsSourceCollection()
  nameWithType: ItemsSourceCollection.ItemsSourceCollection()
  fullName: Celestial.UIToolkit.ItemsSourceCollection.ItemsSourceCollection()
  type: Constructor
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: .ctor
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 177
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nInitializes a new, empty <xref href=\"Celestial.UIToolkit.ItemsSourceCollection\" data-throw-if-not-resolved=\"false\"></xref> without an\n<xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ItemsSourceCollection()
    content.vb: Public Sub New
  overload: Celestial.UIToolkit.ItemsSourceCollection.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  id: RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: RaiseCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ItemsSourceCollection.RaiseCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: RaiseCollectionChanged
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 269
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nRaises the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event and\ncalls the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method afterwards.\nIn addition, the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event is raised for the\n<xref href=\"Celestial.UIToolkit.ItemsSourceCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> and index-accessor properties.\n"
  example: []
  syntax:
    content: protected void RaiseCollectionChanged(NotifyCollectionChangedEventArgs e)
    parameters:
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
      description: Event data for the event.
    content.vb: Protected Sub RaiseCollectionChanged(e As NotifyCollectionChangedEventArgs)
  overload: Celestial.UIToolkit.ItemsSourceCollection.RaiseCollectionChanged*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  id: OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  nameWithType: ItemsSourceCollection.OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: OnCollectionChanged
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 283
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nCalled before the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event occurs.\n"
  example: []
  syntax:
    content: protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
    parameters:
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
      description: Event data for the event.
    content.vb: Protected Overridable Sub OnCollectionChanged(e As NotifyCollectionChangedEventArgs)
  overload: Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged(System.String)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged(System.String)
  id: RaisePropertyChanged(System.String)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: RaisePropertyChanged(String)
  nameWithType: ItemsSourceCollection.RaisePropertyChanged(String)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged(System.String)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: RaisePropertyChanged
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 290
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nRaises the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event and\ncalls the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method afterwards.\n"
  example: []
  syntax:
    content: protected void RaisePropertyChanged(string propertyName = "")
    parameters:
    - id: propertyName
      type: System.String
      description: The name of the changed property.
    content.vb: Protected Sub RaisePropertyChanged(propertyName As String = "")
  overload: Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  id: RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: RaisePropertyChanged(PropertyChangedEventArgs)
  nameWithType: ItemsSourceCollection.RaisePropertyChanged(PropertyChangedEventArgs)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: RaisePropertyChanged
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 302
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nRaises the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event and\ncalls the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method afterwards.\n"
  example: []
  syntax:
    content: protected void RaisePropertyChanged(PropertyChangedEventArgs e)
    parameters:
    - id: e
      type: System.ComponentModel.PropertyChangedEventArgs
      description: Event data for the event.
    content.vb: Protected Sub RaisePropertyChanged(e As PropertyChangedEventArgs)
  overload: Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(PropertyChangedEventArgs)
  nameWithType: ItemsSourceCollection.OnPropertyChanged(PropertyChangedEventArgs)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: OnPropertyChanged
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 312
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nCalled before the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event occurs.\n"
  example: []
  syntax:
    content: protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
    parameters:
    - id: e
      type: System.ComponentModel.PropertyChangedEventArgs
      description: Event data for the event.
    content.vb: Protected Overridable Sub OnPropertyChanged(e As PropertyChangedEventArgs)
  overload: Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Celestial.UIToolkit.ItemsSourceCollection.GetElementAt(System.Int32)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.GetElementAt(System.Int32)
  id: GetElementAt(System.Int32)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: GetElementAt(Int32)
  nameWithType: ItemsSourceCollection.GetElementAt(Int32)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.GetElementAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: GetElementAt
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 330
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nGets the element at the specified index.\n"
  example: []
  syntax:
    content: public object GetElementAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The index.
    return:
      type: System.Object
      description: "\nThe element at the specified index in the collection, if <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>\nis null.\nIf <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, returns the element\nat the specified index from the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> is set, but does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>,\nthis will return the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>, as long as the <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code>\nis 0.\n"
    content.vb: Public Function GetElementAt(index As Integer) As Object
  overload: Celestial.UIToolkit.ItemsSourceCollection.GetElementAt*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.IndexOf(System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IndexOf(Object)
  nameWithType: ItemsSourceCollection.IndexOf(Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: IndexOf
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 368
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nReturns the index of the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> within the collection.\n"
  example: []
  syntax:
    content: public int IndexOf(object value)
    parameters:
    - id: value
      type: System.Object
      description: The value to be found.
    return:
      type: System.Int32
      description: "\nThe index of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> within the collection or the \n<xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref>, if the latter implements <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>.\nIf <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> is set, but does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>,\nthis method compares the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> object to <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>\nand returns 0, if they are equal.\n\nIf nothing was found, returns -1.\n"
    content.vb: Public Function IndexOf(value As Object) As Integer
  overload: Celestial.UIToolkit.ItemsSourceCollection.IndexOf*
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.Contains(System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.Contains(System.Object)
  id: Contains(System.Object)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: Contains(Object)
  nameWithType: ItemsSourceCollection.Contains(Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: Contains
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 401
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nReturns a value indicating whether the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> can be found\ninside this collection.\n"
  example: []
  syntax:
    content: public bool Contains(object value)
    parameters:
    - id: value
      type: System.Object
      description: "\nThe value to be checked.\n"
    return:
      type: System.Boolean
      description: "\ntrue if either the collection, or an <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> which implements\n<xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> contains the provided <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\nIf <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, \nthis returns a value indicating whether it equals the specified\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
    content.vb: Public Function Contains(value As Object) As Boolean
  overload: Celestial.UIToolkit.ItemsSourceCollection.Contains*
  implements:
  - System.Collections.IList.Contains(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.CopyTo(System.Array,System.Int32)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  nameWithType: ItemsSourceCollection.CopyTo(Array, Int32)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: CopyTo
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 427
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nCopies the elements of this collection to the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code>.\n"
  example: []
  syntax:
    content: public void CopyTo(Array array, int index)
    parameters:
    - id: array
      type: System.Array
      description: The destination array.
    - id: index
      type: System.Int32
      description: "\nThe zero-based index in <code data-dev-comment-type=\"paramref\" class=\"paramref\">array</code> from which copying starts.\n"
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
  overload: Celestial.UIToolkit.ItemsSourceCollection.CopyTo*
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ItemsSourceCollection.IEnumerable.GetEnumerator()
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 451
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ItemsSourceCollection.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Celestial.UIToolkit.ItemsSourceCollection.GetEnumerator
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.GetEnumerator
  id: GetEnumerator
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ItemsSourceCollection.GetEnumerator()
  fullName: Celestial.UIToolkit.ItemsSourceCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: GetEnumerator
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 463
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nReturns an enumerator which can be used to enumerate the collection.\n"
  example: []
  syntax:
    content: public IEnumerator<object> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Object}
      description: "\nAn <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> which can be used to enumerate over the\ncollection.\n"
    content.vb: Public Function GetEnumerator As IEnumerator(Of Object)
  overload: Celestial.UIToolkit.ItemsSourceCollection.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.Add(System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.Add(System.Object)
  id: Add(System.Object)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: Add(Object)
  nameWithType: ItemsSourceCollection.Add(Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: Add
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 490
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nAdds the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> to the collection.\n"
  example: []
  syntax:
    content: public int Add(object value)
    parameters:
    - id: value
      type: System.Object
      description: The value to be added.
    return:
      type: System.Int32
      description: The index, at which the value was added.
    content.vb: Public Function Add(value As Object) As Integer
  overload: Celestial.UIToolkit.ItemsSourceCollection.Add*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown if the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> property is set.\n"
  implements:
  - System.Collections.IList.Add(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.Clear
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.Clear
  id: Clear
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ItemsSourceCollection.Clear()
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Clear()
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: Clear
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 503
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nRemoves all elements from the collection.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Celestial.UIToolkit.ItemsSourceCollection.Clear*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown if the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> property is set.\n"
  implements:
  - System.Collections.IList.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.Insert(System.Int32,System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, Object)
  nameWithType: ItemsSourceCollection.Insert(Int32, Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: Insert
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 517
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nInserts an element into the collection at the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code>.\n"
  example: []
  syntax:
    content: public void Insert(int index, object value)
    parameters:
    - id: index
      type: System.Int32
      description: The index at which the element should be inserted.
    - id: value
      type: System.Object
      description: The element to be inserted.
    content.vb: Public Sub Insert(index As Integer, value As Object)
  overload: Celestial.UIToolkit.ItemsSourceCollection.Insert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown if the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> property is set.\n"
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IList#Remove(System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  nameWithType: ItemsSourceCollection.IList.Remove(Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.IList.Remove
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 523
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: void IList.Remove(object value)
    parameters:
    - id: value
      type: System.Object
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IList#Remove*
  implements:
  - System.Collections.IList.Remove(System.Object)
  nameWithType.vb: ItemsSourceCollection.System.Collections.IList.Remove(Object)
  name.vb: System.Collections.IList.Remove(Object)
- uid: Celestial.UIToolkit.ItemsSourceCollection.Remove(System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.Remove(System.Object)
  id: Remove(System.Object)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: Remove(Object)
  nameWithType: ItemsSourceCollection.Remove(Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: Remove
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 538
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nIf found, removes the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> from the collection.\n"
  example: []
  syntax:
    content: public bool Remove(object value)
    parameters:
    - id: value
      type: System.Object
      description: The value to be removed from the collection.
    return:
      type: System.Boolean
      description: "\ntrue if removing the item succeeded; false if not.\n"
    content.vb: Public Function Remove(value As Object) As Boolean
  overload: Celestial.UIToolkit.ItemsSourceCollection.Remove*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown if the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> property is set.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.RemoveAt(System.Int32)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ItemsSourceCollection.RemoveAt(Int32)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: RemoveAt
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 560
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  summary: "\nRemoves the element at the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> from the collection.\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
      description: The element&apos;s index.
    content.vb: Public Sub RemoveAt(index As Integer)
  overload: Celestial.UIToolkit.ItemsSourceCollection.RemoveAt*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown if the <xref href=\"Celestial.UIToolkit.ItemsSourceCollection.ItemsSource\" data-throw-if-not-resolved=\"false\"></xref> property is set.\n"
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Count
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Count
  id: System#Collections#Generic#ICollection{System#Object}#Count
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: ICollection<Object>.Count
  nameWithType: ItemsSourceCollection.ICollection<Object>.Count
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Count
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.ICollection<System.Object>.Count
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 594
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: int ICollection<object>.Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Object>.Count As Integer Implements ICollection(Of Object).Count
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Count*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Count
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Object>.Count
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Object}#IsReadOnly
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: ICollection<Object>.IsReadOnly
  nameWithType: ItemsSourceCollection.ICollection<Object>.IsReadOnly
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.ICollection<System.Object>.IsReadOnly
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 596
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: bool ICollection<object>.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Object>.IsReadOnly As Boolean Implements ICollection(Of Object).IsReadOnly
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.IsReadOnly
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Object>.IsReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Item(System.Int32)
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Item(System.Int32)
  id: System#Collections#Generic#IList{System#Object}#Item(System.Int32)
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IList<Object>.Item[Int32]
  nameWithType: ItemsSourceCollection.IList<Object>.Item[Int32]
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.IList<System.Object>.this[]
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 598
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: object IList<object>.this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<System.Object>.Item(index As Integer) As Object Implements IList(Of Object).this[]
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Item*
  implements:
  - System.Collections.Generic.IList{System.Object}.Item(System.Int32)
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<System.Object>.Item(Int32)
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#IndexOf(System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#IndexOf(System.Object)
  id: System#Collections#Generic#IList{System#Object}#IndexOf(System.Object)
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IList<Object>.IndexOf(Object)
  nameWithType: ItemsSourceCollection.IList<Object>.IndexOf(Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.IList<System.Object>.IndexOf
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 604
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: int IList<object>.IndexOf(object item)
    parameters:
    - id: item
      type: System.Object
    return:
      type: System.Int32
    content.vb: Function System.Collections.Generic.IList<System.Object>.IndexOf(item As Object) As Integer Implements IList(Of Object).IndexOf
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#IndexOf*
  implements:
  - System.Collections.Generic.IList{System.Object}.IndexOf(System.Object)
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.IndexOf(Object)
  name.vb: System.Collections.Generic.IList<System.Object>.IndexOf(Object)
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Insert(System.Int32,System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Insert(System.Int32,System.Object)
  id: System#Collections#Generic#IList{System#Object}#Insert(System.Int32,System.Object)
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IList<Object>.Insert(Int32, Object)
  nameWithType: ItemsSourceCollection.IList<Object>.Insert(Int32, Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.IList<System.Object>.Insert
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 606
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: void IList<object>.Insert(int index, object item)
    parameters:
    - id: index
      type: System.Int32
    - id: item
      type: System.Object
    content.vb: Sub System.Collections.Generic.IList<System.Object>.Insert(index As Integer, item As Object) Implements IList(Of Object).Insert
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Insert*
  implements:
  - System.Collections.Generic.IList{System.Object}.Insert(System.Int32,System.Object)
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.Insert(Int32, Object)
  name.vb: System.Collections.Generic.IList<System.Object>.Insert(Int32, Object)
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#RemoveAt(System.Int32)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{System#Object}#RemoveAt(System.Int32)
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IList<Object>.RemoveAt(Int32)
  nameWithType: ItemsSourceCollection.IList<Object>.RemoveAt(Int32)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.IList<System.Object>.RemoveAt
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 608
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: void IList<object>.RemoveAt(int index)
    parameters:
    - id: index
      type: System.Int32
    content.vb: Sub System.Collections.Generic.IList<System.Object>.RemoveAt(index As Integer) Implements IList(Of Object).RemoveAt
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#RemoveAt*
  implements:
  - System.Collections.Generic.IList{System.Object}.RemoveAt(System.Int32)
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.RemoveAt(Int32)
  name.vb: System.Collections.Generic.IList<System.Object>.RemoveAt(Int32)
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Add(System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Add(System.Object)
  id: System#Collections#Generic#ICollection{System#Object}#Add(System.Object)
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: ICollection<Object>.Add(Object)
  nameWithType: ItemsSourceCollection.ICollection<Object>.Add(Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.ICollection<System.Object>.Add
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 610
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: void ICollection<object>.Add(object item)
    parameters:
    - id: item
      type: System.Object
    content.vb: Sub System.Collections.Generic.ICollection<System.Object>.Add(item As Object) Implements ICollection(Of Object).Add
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Add*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Add(System.Object)
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Add(Object)
  name.vb: System.Collections.Generic.ICollection<System.Object>.Add(Object)
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Clear
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Clear
  id: System#Collections#Generic#ICollection{System#Object}#Clear
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: ICollection<Object>.Clear()
  nameWithType: ItemsSourceCollection.ICollection<Object>.Clear()
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Clear()
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.ICollection<System.Object>.Clear
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 612
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: void ICollection<object>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<System.Object>.Clear Implements ICollection(Of Object).Clear
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Clear
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Clear()
  name.vb: System.Collections.Generic.ICollection<System.Object>.Clear()
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Contains(System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Contains(System.Object)
  id: System#Collections#Generic#ICollection{System#Object}#Contains(System.Object)
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: ICollection<Object>.Contains(Object)
  nameWithType: ItemsSourceCollection.ICollection<Object>.Contains(Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.ICollection<System.Object>.Contains
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 614
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: bool ICollection<object>.Contains(object item)
    parameters:
    - id: item
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Object>.Contains(item As Object) As Boolean Implements ICollection(Of Object).Contains
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Contains(System.Object)
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Contains(Object)
  name.vb: System.Collections.Generic.ICollection<System.Object>.Contains(Object)
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#CopyTo(System.Object[],System.Int32)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#CopyTo(System.Object[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Object}#CopyTo(System.Object[],System.Int32)
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: ICollection<Object>.CopyTo(Object[], Int32)
  nameWithType: ItemsSourceCollection.ICollection<Object>.CopyTo(Object[], Int32)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.CopyTo(System.Object[], System.Int32)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.ICollection<System.Object>.CopyTo
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 616
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: void ICollection<object>.CopyTo(object[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Object[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.Generic.ICollection<System.Object>.CopyTo(array As Object(), arrayIndex As Integer) Implements ICollection(Of Object).CopyTo
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.CopyTo(System.Object[],System.Int32)
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.CopyTo(Object(), Int32)
  fullName.vb: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.CopyTo(System.Object(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Object>.CopyTo(Object(), Int32)
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Remove(System.Object)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Remove(System.Object)
  id: System#Collections#Generic#ICollection{System#Object}#Remove(System.Object)
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: ICollection<Object>.Remove(Object)
  nameWithType: ItemsSourceCollection.ICollection<Object>.Remove(Object)
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.ICollection<System.Object>.Remove
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 619
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: bool ICollection<object>.Remove(object item)
    parameters:
    - id: item
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Object>.Remove(item As Object) As Boolean Implements ICollection(Of Object).Remove
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Object}.Remove(System.Object)
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Remove(Object)
  name.vb: System.Collections.Generic.ICollection<System.Object>.Remove(Object)
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator
  isEii: true
  parent: Celestial.UIToolkit.ItemsSourceCollection
  langs:
  - csharp
  - vb
  name: IEnumerable<Object>.GetEnumerator()
  nameWithType: ItemsSourceCollection.IEnumerable<Object>.GetEnumerator()
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator
    path: src/Celestial.UIToolkit.Core/ItemsSourceCollection.cs
    startLine: 621
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit
  syntax:
    content: IEnumerator<object> IEnumerable<object>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Object}
    content.vb: Function System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator As IEnumerator(Of Object) Implements IEnumerable(Of Object).GetEnumerator
  overload: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Object}.GetEnumerator
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
references:
- uid: Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
  isExternal: true
- uid: Celestial.UIToolkit
  commentId: N:Celestial.UIToolkit
  name: Celestial.UIToolkit
  nameWithType: Celestial.UIToolkit
  fullName: Celestial.UIToolkit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Generic.IList{System.Object}
  commentId: T:System.Collections.Generic.IList{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Object>
  nameWithType: IList<Object>
  fullName: System.Collections.Generic.IList<System.Object>
  nameWithType.vb: IList(Of Object)
  fullName.vb: System.Collections.Generic.IList(Of System.Object)
  name.vb: IList(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Object}
  commentId: T:System.Collections.Generic.ICollection{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Object>
  nameWithType: ICollection<Object>
  fullName: System.Collections.Generic.ICollection<System.Object>
  nameWithType.vb: ICollection(Of Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object)
  name.vb: ICollection(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Int32)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: Celestial.UIToolkit.Extensions.EnumerableExtensions
  definition: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ElementAfter<Object>(Int32)
  nameWithType: EnumerableExtensions.ElementAfter<Object>(Int32)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter<System.Object>(System.Int32)
  nameWithType.vb: EnumerableExtensions.ElementAfter(Of Object)(Int32)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter(Of System.Object)(System.Int32)
  name.vb: ElementAfter(Of Object)(Int32)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Int32)
    name: ElementAfter<Object>
    nameWithType: EnumerableExtensions.ElementAfter<Object>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter<System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Int32)
    name: ElementAfter(Of Object)
    nameWithType: EnumerableExtensions.ElementAfter(Of Object)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter(Of System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Int32)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: Celestial.UIToolkit.Extensions.EnumerableExtensions
  definition: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ElementAfterOrDefault<Object>(Int32)
  nameWithType: EnumerableExtensions.ElementAfterOrDefault<Object>(Int32)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault<System.Object>(System.Int32)
  nameWithType.vb: EnumerableExtensions.ElementAfterOrDefault(Of Object)(Int32)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault(Of System.Object)(System.Int32)
  name.vb: ElementAfterOrDefault(Of Object)(Int32)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Int32)
    name: ElementAfterOrDefault<Object>
    nameWithType: EnumerableExtensions.ElementAfterOrDefault<Object>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault<System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Int32)
    name: ElementAfterOrDefault(Of Object)
    nameWithType: EnumerableExtensions.ElementAfterOrDefault(Of Object)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault(Of System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Int32)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: Celestial.UIToolkit.Extensions.EnumerableExtensions
  definition: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ElementBefore<Object>(Int32)
  nameWithType: EnumerableExtensions.ElementBefore<Object>(Int32)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore<System.Object>(System.Int32)
  nameWithType.vb: EnumerableExtensions.ElementBefore(Of Object)(Int32)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore(Of System.Object)(System.Int32)
  name.vb: ElementBefore(Of Object)(Int32)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Int32)
    name: ElementBefore<Object>
    nameWithType: EnumerableExtensions.ElementBefore<Object>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore<System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Int32)
    name: ElementBefore(Of Object)
    nameWithType: EnumerableExtensions.ElementBefore(Of Object)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore(Of System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Int32)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  parent: Celestial.UIToolkit.Extensions.EnumerableExtensions
  definition: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ElementBeforeOrDefault<Object>(Int32)
  nameWithType: EnumerableExtensions.ElementBeforeOrDefault<Object>(Int32)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault<System.Object>(System.Int32)
  nameWithType.vb: EnumerableExtensions.ElementBeforeOrDefault(Of Object)(Int32)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault(Of System.Object)(System.Int32)
  name.vb: ElementBeforeOrDefault(Of Object)(Int32)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Int32)
    name: ElementBeforeOrDefault<Object>
    nameWithType: EnumerableExtensions.ElementBeforeOrDefault<Object>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault<System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Int32)
    name: ElementBeforeOrDefault(Of Object)
    nameWithType: EnumerableExtensions.ElementBeforeOrDefault(Of Object)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault(Of System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(System.Object)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
  parent: Celestial.UIToolkit.Extensions.EnumerableExtensions
  definition: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: IndexOf<Object>(Object)
  nameWithType: EnumerableExtensions.IndexOf<Object>(Object)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf<System.Object>(System.Object)
  nameWithType.vb: EnumerableExtensions.IndexOf(Of Object)(Object)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf(Of System.Object)(System.Object)
  name.vb: IndexOf(Of Object)(Object)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(``0)
    name: IndexOf<Object>
    nameWithType: EnumerableExtensions.IndexOf<Object>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf<System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(``0)
    name: IndexOf(Of Object)
    nameWithType: EnumerableExtensions.IndexOf(Of Object)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf(Of System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
  parent: Celestial.UIToolkit.Extensions.EnumerableExtensions
  definition: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
  name: AddRange<Object>(IEnumerable<Object>)
  nameWithType: EnumerableExtensions.AddRange<Object>(IEnumerable<Object>)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange<System.Object>(System.Collections.Generic.IEnumerable<System.Object>)
  nameWithType.vb: EnumerableExtensions.AddRange(Of Object)(IEnumerable(Of Object))
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange(Of System.Object)(System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: AddRange(Of Object)(IEnumerable(Of Object))
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.IEnumerable{``0})
    name: AddRange<Object>
    nameWithType: EnumerableExtensions.AddRange<Object>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange<System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.IEnumerable{``0})
    name: AddRange(Of Object)
    nameWithType: EnumerableExtensions.AddRange(Of Object)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange(Of System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{System.Object}.Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Func{System.Object,System.Boolean})
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})
  parent: Celestial.UIToolkit.Extensions.EnumerableExtensions
  definition: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})
  name: RemoveAll<Object>(Func<Object, Boolean>)
  nameWithType: EnumerableExtensions.RemoveAll<Object>(Func<Object, Boolean>)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll<System.Object>(System.Func<System.Object, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.RemoveAll(Of Object)(Func(Of Object, Boolean))
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll(Of System.Object)(System.Func(Of System.Object, System.Boolean))
  name.vb: RemoveAll(Of Object)(Func(Of Object, Boolean))
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Func{``0,System.Boolean})
    name: RemoveAll<Object>
    nameWithType: EnumerableExtensions.RemoveAll<Object>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll<System.Object>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Func{``0,System.Boolean})
    name: RemoveAll(Of Object)
    nameWithType: EnumerableExtensions.RemoveAll(Of Object)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll(Of System.Object)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: ElementAfter<T>(IEnumerable<T>, Int32)
  nameWithType: EnumerableExtensions.ElementAfter<T>(IEnumerable<T>, Int32)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: EnumerableExtensions.ElementAfter(Of T)(IEnumerable(Of T), Int32)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: ElementAfter(Of T)(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementAfter<T>
    nameWithType: EnumerableExtensions.ElementAfter<T>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementAfter(Of T)
    nameWithType: EnumerableExtensions.ElementAfter(Of T)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfter(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Extensions.EnumerableExtensions
  commentId: T:Celestial.UIToolkit.Extensions.EnumerableExtensions
  parent: Celestial.UIToolkit.Extensions
  name: EnumerableExtensions
  nameWithType: EnumerableExtensions
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions
- uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: ElementAfterOrDefault<T>(IEnumerable<T>, Int32)
  nameWithType: EnumerableExtensions.ElementAfterOrDefault<T>(IEnumerable<T>, Int32)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: EnumerableExtensions.ElementAfterOrDefault(Of T)(IEnumerable(Of T), Int32)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: ElementAfterOrDefault(Of T)(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementAfterOrDefault<T>
    nameWithType: EnumerableExtensions.ElementAfterOrDefault<T>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementAfterOrDefault(Of T)
    nameWithType: EnumerableExtensions.ElementAfterOrDefault(Of T)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementAfterOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: ElementBefore<T>(IEnumerable<T>, Int32)
  nameWithType: EnumerableExtensions.ElementBefore<T>(IEnumerable<T>, Int32)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: EnumerableExtensions.ElementBefore(Of T)(IEnumerable(Of T), Int32)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: ElementBefore(Of T)(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementBefore<T>
    nameWithType: EnumerableExtensions.ElementBefore<T>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementBefore(Of T)
    nameWithType: EnumerableExtensions.ElementBefore(Of T)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBefore(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: ElementBeforeOrDefault<T>(IEnumerable<T>, Int32)
  nameWithType: EnumerableExtensions.ElementBeforeOrDefault<T>(IEnumerable<T>, Int32)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault<T>(System.Collections.Generic.IEnumerable<T>, System.Int32)
  nameWithType.vb: EnumerableExtensions.ElementBeforeOrDefault(Of T)(IEnumerable(Of T), Int32)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Int32)
  name.vb: ElementBeforeOrDefault(Of T)(IEnumerable(Of T), Int32)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementBeforeOrDefault<T>
    nameWithType: EnumerableExtensions.ElementBeforeOrDefault<T>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementBeforeOrDefault(Of T)
    nameWithType: EnumerableExtensions.ElementBeforeOrDefault(Of T)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.ElementBeforeOrDefault(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: IndexOf<T>(IEnumerable<T>, T)
  nameWithType: EnumerableExtensions.IndexOf<T>(IEnumerable<T>, T)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf<T>(System.Collections.Generic.IEnumerable<T>, T)
  nameWithType.vb: EnumerableExtensions.IndexOf(Of T)(IEnumerable(Of T), T)
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf(Of T)(System.Collections.Generic.IEnumerable(Of T), T)
  name.vb: IndexOf(Of T)(IEnumerable(Of T), T)
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: IndexOf<T>
    nameWithType: EnumerableExtensions.IndexOf<T>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: IndexOf(Of T)
    nameWithType: EnumerableExtensions.IndexOf(Of T)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.IndexOf(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: AddRange<T>(ICollection<T>, IEnumerable<T>)
  nameWithType: EnumerableExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange<T>(System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: EnumerableExtensions.AddRange(Of T)(ICollection(Of T), IEnumerable(Of T))
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange(Of T)(System.Collections.Generic.ICollection(Of T), System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(Of T)(ICollection(Of T), IEnumerable(Of T))
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
    name: AddRange<T>
    nameWithType: EnumerableExtensions.AddRange<T>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})
    name: AddRange(Of T)
    nameWithType: EnumerableExtensions.AddRange(Of T)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.AddRange(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})
  commentId: M:Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: RemoveAll<T>(IList<T>, Func<T, Boolean>)
  nameWithType: EnumerableExtensions.RemoveAll<T>(IList<T>, Func<T, Boolean>)
  fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll<T>(System.Collections.Generic.IList<T>, System.Func<T, System.Boolean>)
  nameWithType.vb: EnumerableExtensions.RemoveAll(Of T)(IList(Of T), Func(Of T, Boolean))
  fullName.vb: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll(Of T)(System.Collections.Generic.IList(Of T), System.Func(Of T, System.Boolean))
  name.vb: RemoveAll(Of T)(IList(Of T), Func(Of T, Boolean))
  spec.csharp:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})
    name: RemoveAll<T>
    nameWithType: EnumerableExtensions.RemoveAll<T>
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})
    name: RemoveAll(Of T)
    nameWithType: EnumerableExtensions.RemoveAll(Of T)
    fullName: Celestial.UIToolkit.Extensions.EnumerableExtensions.RemoveAll(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Extensions
  commentId: N:Celestial.UIToolkit.Extensions
  name: Celestial.UIToolkit.Extensions
  nameWithType: Celestial.UIToolkit.Extensions
  fullName: Celestial.UIToolkit.Extensions
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventHandler
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: Celestial.UIToolkit.ItemsSourceCollection.IsUsingItemsSource*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.IsUsingItemsSource
  name: IsUsingItemsSource
  nameWithType: ItemsSourceCollection.IsUsingItemsSource
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IsUsingItemsSource
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Celestial.UIToolkit.ItemsSourceCollection.HasEnumerableItemsSource*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.HasEnumerableItemsSource
  name: HasEnumerableItemsSource
  nameWithType: ItemsSourceCollection.HasEnumerableItemsSource
  fullName: Celestial.UIToolkit.ItemsSourceCollection.HasEnumerableItemsSource
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
- uid: Celestial.UIToolkit.ItemsSourceCollection.ItemsSource*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
  name: ItemsSource
  nameWithType: ItemsSourceCollection.ItemsSource
  fullName: Celestial.UIToolkit.ItemsSourceCollection.ItemsSource
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: true
- uid: Celestial.UIToolkit.ItemsSourceCollection.Item*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.Item
  name: Item
  nameWithType: ItemsSourceCollection.Item
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Item
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  nameWithType: IList.Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  nameWithType.vb: IList.Item(Int32)
  fullName.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Celestial.UIToolkit.ItemsSourceCollection.Count*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.Count
  name: Count
  nameWithType: ItemsSourceCollection.Count
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Count
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: true
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: Celestial.UIToolkit.ItemsSourceCollection.IsReadOnly*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.IsReadOnly
  name: IsReadOnly
  nameWithType: ItemsSourceCollection.IsReadOnly
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IsReadOnly
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: true
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.IsFixedSize*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.IsFixedSize
  name: IsFixedSize
  nameWithType: ItemsSourceCollection.IsFixedSize
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IsFixedSize
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: true
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: Celestial.UIToolkit.ItemsSourceCollection.SyncRoot*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.SyncRoot
  name: SyncRoot
  nameWithType: ItemsSourceCollection.SyncRoot
  fullName: Celestial.UIToolkit.ItemsSourceCollection.SyncRoot
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: true
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: Celestial.UIToolkit.ItemsSourceCollection.IsSynchronized*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.IsSynchronized
  name: IsSynchronized
  nameWithType: ItemsSourceCollection.IsSynchronized
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IsSynchronized
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: true
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: Celestial.UIToolkit.ItemsSourceCollection
  commentId: T:Celestial.UIToolkit.ItemsSourceCollection
  parent: Celestial.UIToolkit
  name: ItemsSourceCollection
  nameWithType: ItemsSourceCollection
  fullName: Celestial.UIToolkit.ItemsSourceCollection
- uid: Celestial.UIToolkit.ItemsSourceCollection.#ctor*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.#ctor
  name: ItemsSourceCollection
  nameWithType: ItemsSourceCollection.ItemsSourceCollection
  fullName: Celestial.UIToolkit.ItemsSourceCollection.ItemsSourceCollection
- uid: Celestial.UIToolkit.ItemsSourceCollection.CollectionChanged
  commentId: E:Celestial.UIToolkit.ItemsSourceCollection.CollectionChanged
  isExternal: true
- uid: Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  isExternal: true
- uid: Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged
  commentId: E:Celestial.UIToolkit.ItemsSourceCollection.PropertyChanged
  isExternal: true
- uid: Celestial.UIToolkit.ItemsSourceCollection.Count
  commentId: P:Celestial.UIToolkit.ItemsSourceCollection.Count
  isExternal: true
- uid: Celestial.UIToolkit.ItemsSourceCollection.RaiseCollectionChanged*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.RaiseCollectionChanged
  name: RaiseCollectionChanged
  nameWithType: ItemsSourceCollection.RaiseCollectionChanged
  fullName: Celestial.UIToolkit.ItemsSourceCollection.RaiseCollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventArgs
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventArgs
  nameWithType: NotifyCollectionChangedEventArgs
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
- uid: Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged
  name: OnCollectionChanged
  nameWithType: ItemsSourceCollection.OnCollectionChanged
  fullName: Celestial.UIToolkit.ItemsSourceCollection.OnCollectionChanged
- uid: Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  commentId: M:Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  isExternal: true
- uid: Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged
  name: RaisePropertyChanged
  nameWithType: ItemsSourceCollection.RaisePropertyChanged
  fullName: Celestial.UIToolkit.ItemsSourceCollection.RaisePropertyChanged
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.PropertyChangedEventArgs
  commentId: T:System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged
  name: OnPropertyChanged
  nameWithType: ItemsSourceCollection.OnPropertyChanged
  fullName: Celestial.UIToolkit.ItemsSourceCollection.OnPropertyChanged
- uid: Celestial.UIToolkit.ItemsSourceCollection.GetElementAt*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.GetElementAt
  name: GetElementAt
  nameWithType: ItemsSourceCollection.GetElementAt
  fullName: Celestial.UIToolkit.ItemsSourceCollection.GetElementAt
- uid: Celestial.UIToolkit.ItemsSourceCollection.IndexOf*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.IndexOf
  name: IndexOf
  nameWithType: ItemsSourceCollection.IndexOf
  fullName: Celestial.UIToolkit.ItemsSourceCollection.IndexOf
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.Contains*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.Contains
  name: Contains
  nameWithType: ItemsSourceCollection.Contains
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Contains
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.CopyTo*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.CopyTo
  name: CopyTo
  nameWithType: ItemsSourceCollection.CopyTo
  fullName: Celestial.UIToolkit.ItemsSourceCollection.CopyTo
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ItemsSourceCollection.IEnumerable.GetEnumerator
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ItemsSourceCollection.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.GetEnumerator*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.GetEnumerator
  name: GetEnumerator
  nameWithType: ItemsSourceCollection.GetEnumerator
  fullName: Celestial.UIToolkit.ItemsSourceCollection.GetEnumerator
- uid: System.Collections.Generic.IEnumerator{System.Object}
  commentId: T:System.Collections.Generic.IEnumerator{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<Object>
  nameWithType: IEnumerator<Object>
  fullName: System.Collections.Generic.IEnumerator<System.Object>
  nameWithType.vb: IEnumerator(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Object)
  name.vb: IEnumerator(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.Add*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.Add
  name: Add
  nameWithType: ItemsSourceCollection.Add
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Add
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.Clear*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.Clear
  name: Clear
  nameWithType: ItemsSourceCollection.Clear
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Clear
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: true
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.Insert*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.Insert
  name: Insert
  nameWithType: ItemsSourceCollection.Insert
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Insert
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  nameWithType: IList.Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IList#Remove*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#IList#Remove
  name: IList.Remove
  nameWithType: ItemsSourceCollection.IList.Remove
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.IList.Remove
  nameWithType.vb: ItemsSourceCollection.System.Collections.IList.Remove
  name.vb: System.Collections.IList.Remove
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.Remove*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.Remove
  name: Remove
  nameWithType: ItemsSourceCollection.Remove
  fullName: Celestial.UIToolkit.ItemsSourceCollection.Remove
- uid: Celestial.UIToolkit.ItemsSourceCollection.RemoveAt*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.RemoveAt
  name: RemoveAt
  nameWithType: ItemsSourceCollection.RemoveAt
  fullName: Celestial.UIToolkit.ItemsSourceCollection.RemoveAt
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Count*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Count
  name: ICollection<Object>.Count
  nameWithType: ItemsSourceCollection.ICollection<Object>.Count
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Count
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Count
  name.vb: System.Collections.Generic.ICollection<System.Object>.Count
- uid: System.Collections.Generic.ICollection{System.Object}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Object}.Count
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<Object>.Count
  fullName: System.Collections.Generic.ICollection<System.Object>.Count
  nameWithType.vb: ICollection(Of Object).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#IsReadOnly
  name: ICollection<Object>.IsReadOnly
  nameWithType: ItemsSourceCollection.ICollection<Object>.IsReadOnly
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.IsReadOnly
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Object>.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Object}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Object}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<Object>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Object>.IsReadOnly
  nameWithType.vb: ICollection(Of Object).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Item*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Item
  name: IList<Object>.Item
  nameWithType: ItemsSourceCollection.IList<Object>.Item
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.Item
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.Item
  name.vb: System.Collections.Generic.IList<System.Object>.Item
- uid: System.Collections.Generic.IList{System.Object}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{System.Object}.Item(System.Int32)
  parent: System.Collections.Generic.IList{System.Object}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<Object>.Item[Int32]
  fullName: System.Collections.Generic.IList<System.Object>.Item[System.Int32]
  nameWithType.vb: IList(Of Object).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of System.Object).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<Object>.Item
    fullName: System.Collections.Generic.IList<System.Object>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of Object).Item
    fullName: System.Collections.Generic.IList(Of System.Object).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#IndexOf*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#IndexOf
  name: IList<Object>.IndexOf
  nameWithType: ItemsSourceCollection.IList<Object>.IndexOf
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.IndexOf
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.IndexOf
  name.vb: System.Collections.Generic.IList<System.Object>.IndexOf
- uid: System.Collections.Generic.IList{System.Object}.IndexOf(System.Object)
  commentId: M:System.Collections.Generic.IList{System.Object}.IndexOf(System.Object)
  parent: System.Collections.Generic.IList{System.Object}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(Object)
  nameWithType: IList<Object>.IndexOf(Object)
  fullName: System.Collections.Generic.IList<System.Object>.IndexOf(System.Object)
  nameWithType.vb: IList(Of Object).IndexOf(Object)
  fullName.vb: System.Collections.Generic.IList(Of System.Object).IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<Object>.IndexOf
    fullName: System.Collections.Generic.IList<System.Object>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of Object).IndexOf
    fullName: System.Collections.Generic.IList(Of System.Object).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Insert*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#Insert
  name: IList<Object>.Insert
  nameWithType: ItemsSourceCollection.IList<Object>.Insert
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.Insert
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.Insert
  name.vb: System.Collections.Generic.IList<System.Object>.Insert
- uid: System.Collections.Generic.IList{System.Object}.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.IList{System.Object}.Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.IList{System.Object}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, Object)
  nameWithType: IList<Object>.Insert(Int32, Object)
  fullName: System.Collections.Generic.IList<System.Object>.Insert(System.Int32, System.Object)
  nameWithType.vb: IList(Of Object).Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.IList(Of System.Object).Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<Object>.Insert
    fullName: System.Collections.Generic.IList<System.Object>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of Object).Insert
    fullName: System.Collections.Generic.IList(Of System.Object).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#RemoveAt*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IList{System#Object}#RemoveAt
  name: IList<Object>.RemoveAt
  nameWithType: ItemsSourceCollection.IList<Object>.RemoveAt
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.RemoveAt
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IList<System.Object>.RemoveAt
  name.vb: System.Collections.Generic.IList<System.Object>.RemoveAt
- uid: System.Collections.Generic.IList{System.Object}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{System.Object}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{System.Object}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<Object>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<System.Object>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of Object).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of System.Object).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<Object>.RemoveAt
    fullName: System.Collections.Generic.IList<System.Object>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of Object).RemoveAt
    fullName: System.Collections.Generic.IList(Of System.Object).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Add*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Add
  name: ICollection<Object>.Add
  nameWithType: ItemsSourceCollection.ICollection<Object>.Add
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Add
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Add
  name.vb: System.Collections.Generic.ICollection<System.Object>.Add
- uid: System.Collections.Generic.ICollection{System.Object}.Add(System.Object)
  commentId: M:System.Collections.Generic.ICollection{System.Object}.Add(System.Object)
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(Object)
  nameWithType: ICollection<Object>.Add(Object)
  fullName: System.Collections.Generic.ICollection<System.Object>.Add(System.Object)
  nameWithType.vb: ICollection(Of Object).Add(Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Add(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<Object>.Add
    fullName: System.Collections.Generic.ICollection<System.Object>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of Object).Add
    fullName: System.Collections.Generic.ICollection(Of System.Object).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Clear*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Clear
  name: ICollection<Object>.Clear
  nameWithType: ItemsSourceCollection.ICollection<Object>.Clear
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Clear
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Clear
  name.vb: System.Collections.Generic.ICollection<System.Object>.Clear
- uid: System.Collections.Generic.ICollection{System.Object}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Object}.Clear
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<Object>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Object>.Clear()
  nameWithType.vb: ICollection(Of Object).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<Object>.Clear
    fullName: System.Collections.Generic.ICollection<System.Object>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of Object).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Object).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Contains*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Contains
  name: ICollection<Object>.Contains
  nameWithType: ItemsSourceCollection.ICollection<Object>.Contains
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Contains
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Contains
  name.vb: System.Collections.Generic.ICollection<System.Object>.Contains
- uid: System.Collections.Generic.ICollection{System.Object}.Contains(System.Object)
  commentId: M:System.Collections.Generic.ICollection{System.Object}.Contains(System.Object)
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(Object)
  nameWithType: ICollection<Object>.Contains(Object)
  fullName: System.Collections.Generic.ICollection<System.Object>.Contains(System.Object)
  nameWithType.vb: ICollection(Of Object).Contains(Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<Object>.Contains
    fullName: System.Collections.Generic.ICollection<System.Object>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of Object).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Object).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#CopyTo*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#CopyTo
  name: ICollection<Object>.CopyTo
  nameWithType: ItemsSourceCollection.ICollection<Object>.CopyTo
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.CopyTo
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.CopyTo
  name.vb: System.Collections.Generic.ICollection<System.Object>.CopyTo
- uid: System.Collections.Generic.ICollection{System.Object}.CopyTo(System.Object[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Object}.CopyTo(System.Object[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Object[], Int32)
  nameWithType: ICollection<Object>.CopyTo(Object[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Object>.CopyTo(System.Object[], System.Int32)
  nameWithType.vb: ICollection(Of Object).CopyTo(Object(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).CopyTo(System.Object(), System.Int32)
  name.vb: CopyTo(Object(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<Object>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Object>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of Object).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Object).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Remove*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#ICollection{System#Object}#Remove
  name: ICollection<Object>.Remove
  nameWithType: ItemsSourceCollection.ICollection<Object>.Remove
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Remove
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.ICollection<System.Object>.Remove
  name.vb: System.Collections.Generic.ICollection<System.Object>.Remove
- uid: System.Collections.Generic.ICollection{System.Object}.Remove(System.Object)
  commentId: M:System.Collections.Generic.ICollection{System.Object}.Remove(System.Object)
  parent: System.Collections.Generic.ICollection{System.Object}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(Object)
  nameWithType: ICollection<Object>.Remove(Object)
  fullName: System.Collections.Generic.ICollection<System.Object>.Remove(System.Object)
  nameWithType.vb: ICollection(Of Object).Remove(Object)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Object).Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<Object>.Remove
    fullName: System.Collections.Generic.ICollection<System.Object>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of Object).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Object).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator*
  commentId: Overload:Celestial.UIToolkit.ItemsSourceCollection.System#Collections#Generic#IEnumerable{System#Object}#GetEnumerator
  name: IEnumerable<Object>.GetEnumerator
  nameWithType: ItemsSourceCollection.IEnumerable<Object>.GetEnumerator
  fullName: Celestial.UIToolkit.ItemsSourceCollection.System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator
  nameWithType.vb: ItemsSourceCollection.System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Object}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Object}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Object}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<Object>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of Object).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Object).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<Object>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Object>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of Object).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Object).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
