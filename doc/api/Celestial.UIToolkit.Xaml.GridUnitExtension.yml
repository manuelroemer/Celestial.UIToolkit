### YamlMime:ManagedReference
items:
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension
  commentId: T:Celestial.UIToolkit.Xaml.GridUnitExtension
  id: GridUnitExtension
  parent: Celestial.UIToolkit.Xaml
  children:
  - Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor
  - Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor(System.String)
  - Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor(System.String,System.Type)
  - Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor(System.Type)
  - Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize
  - Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize
  - Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString
  - Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplyWithDip
  - Celestial.UIToolkit.Xaml.GridUnitExtension.ProvideValue(System.IServiceProvider)
  - Celestial.UIToolkit.Xaml.GridUnitExtension.TargetType
  langs:
  - csharp
  - vb
  name: GridUnitExtension
  nameWithType: GridUnitExtension
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension
  type: Class
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: GridUnitExtension
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 36
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nA <xref href=\"System.Windows.Markup.MarkupExtension\" data-throw-if-not-resolved=\"false\"></xref> which is being used by the toolkit to align\nvisual elements in a grid-like fashion.\nThe idea is that each control uses margins, paddings, sizes, etc. which can be fit\ninto grid cells. Thus, when positioned correctly, all controls will have a unified appearance.\n\nThis extension provides unified values, multiplied with the bounds of a single grid cell.\nSee the example for details.\n"
  example:
  - "\n1gu = 1 grid unit(s) -> Multiplier = 1\n2gu = 2 grid unit(s) -> Multiplier = 2\n\nThus, for a <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize\" data-throw-if-not-resolved=\"false\"></xref> of 4:\n\n1gu = 4 * 1 = 4\n2gu = 4 * 2 = 8\n3gu = 4 * 3 = 12\n...\n\n\nIn XAML, the extension can be used like this:\nWidth=&quot;{c:GridUnit 1.0}&quot;\nMargin=&quot;{c:GridUnit 3}&quot;\nMargin=&quot;{c:GridUnit &apos;3,0&apos;}&quot;\nMargin=&quot;{c:GridUnit &apos;3,0,2,0&apos;}&quot;\n"
  syntax:
    content: 'public class GridUnitExtension : MarkupExtension'
    content.vb: >-
      Public Class GridUnitExtension

          Inherits MarkupExtension
  inheritance:
  - System.Object
  - System.Windows.Markup.MarkupExtension
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize
  commentId: P:Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize
  id: DefaultGridCellSize
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: DefaultGridCellSize
  nameWithType: GridUnitExtension.DefaultGridCellSize
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: DefaultGridCellSize
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 56
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nGets or sets the default value of a single grid unit.\nThis value equals the width and height of a single cell\nin the fictional grid.\n"
  example: []
  syntax:
    content: public static double DefaultGridCellSize { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Shared Property DefaultGridCellSize As Double
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize*
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString
  commentId: P:Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString
  id: MultiplierString
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: MultiplierString
  nameWithType: GridUnitExtension.MultiplierString
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: MultiplierString
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 69
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nGets or sets the value with which the <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize\" data-throw-if-not-resolved=\"false\"></xref>\nwill be multiplied, as string.\nDepending on the target property type, different formats will be allowed.\n\nFor numeric targets (<xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, ...), \na numeric string is valid, e.g. <code>&quot;0&quot;</code>, <code>&quot;1.3&quot;</code>, ...\n\nFor 4-way targets like <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref>, the above is allowed, in addition to the following example formats:\n<code>&quot;1 2&quot;</code>, <code>&quot;4.4 1 2 0&quot;</code>, ...\n"
  example: []
  syntax:
    content: >-
      [ConstructorArgument("multiplierString")]

      public string MultiplierString { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <ConstructorArgument("multiplierString")>

      Public Property MultiplierString As String
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString*
  attributes:
  - type: System.Windows.Markup.ConstructorArgumentAttribute
    ctor: System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: multiplierString
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.TargetType
  commentId: P:Celestial.UIToolkit.Xaml.GridUnitExtension.TargetType
  id: TargetType
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: TargetType
  nameWithType: GridUnitExtension.TargetType
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.TargetType
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: TargetType
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 84
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nGets or sets a type to which the unit will be converted,\nif possible.\n"
  example: []
  syntax:
    content: public Type TargetType { get; set; }
    parameters: []
    return:
      type: System.Type
    content.vb: Public Property TargetType As Type
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.TargetType*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplyWithDip
  commentId: P:Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplyWithDip
  id: MultiplyWithDip
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: MultiplyWithDip
  nameWithType: GridUnitExtension.MultiplyWithDip
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplyWithDip
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: MultiplyWithDip
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 93
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nGets or sets a value indicating whether the\ncalculation of the final value should include a multiplication\nwith the device independent pixel multiplier.\nThis is <code>false</code>, by default, since most conversion targets (like <xref href=\"System.Windows.Thickness\" data-throw-if-not-resolved=\"false\"></xref>)\ndo the calculation by themselves.\n"
  example: []
  syntax:
    content: public bool MultiplyWithDip { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property MultiplyWithDip As Boolean
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplyWithDip*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize
  commentId: P:Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize
  id: GridCellSize
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: GridCellSize
  nameWithType: GridUnitExtension.GridCellSize
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize
  type: Property
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: GridCellSize
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 102
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nGets the value of a single grid unit.\nThis value equals the width and height of a single cell\nin the fictional grid.\nBy default, this returns the value of the static <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize\" data-throw-if-not-resolved=\"false\"></xref> property.\nBy setting this property, you can override this default value for specific cases.\n"
  example: []
  syntax:
    content: public double GridCellSize { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property GridCellSize As Double
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor
  commentId: M:Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor
  id: '#ctor'
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: GridUnitExtension()
  nameWithType: GridUnitExtension.GridUnitExtension()
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.GridUnitExtension()
  type: Constructor
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: .ctor
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 111
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nInitializes a new instance of the <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public GridUnitExtension()
    content.vb: Public Sub New
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor(System.String)
  commentId: M:Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: GridUnitExtension(String)
  nameWithType: GridUnitExtension.GridUnitExtension(String)
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.GridUnitExtension(System.String)
  type: Constructor
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: .ctor
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 122
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nInitializes a new instance of the <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">multiplierString</code>.\n"
  example: []
  syntax:
    content: public GridUnitExtension(string multiplierString)
    parameters:
    - id: multiplierString
      type: System.String
      description: "\nThe value with which the <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize\" data-throw-if-not-resolved=\"false\"></xref>\nwill be multiplied.\n"
    content.vb: Public Sub New(multiplierString As String)
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor(System.Type)
  commentId: M:Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: GridUnitExtension(Type)
  nameWithType: GridUnitExtension.GridUnitExtension(Type)
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.GridUnitExtension(System.Type)
  type: Constructor
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: .ctor
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 132
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nInitializes a new instance of the <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">targetType</code>.\n"
  example: []
  syntax:
    content: public GridUnitExtension(Type targetType)
    parameters:
    - id: targetType
      type: System.Type
      description: "\nA type to which the unit will be converted, if possible.\n"
    content.vb: Public Sub New(targetType As Type)
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor(System.String,System.Type)
  commentId: M:Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: GridUnitExtension(String, Type)
  nameWithType: GridUnitExtension.GridUnitExtension(String, Type)
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.GridUnitExtension(System.String, System.Type)
  type: Constructor
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: .ctor
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 147
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nInitializes a new instance of the <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension\" data-throw-if-not-resolved=\"false\"></xref> class\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">multiplierString</code> and \n<code data-dev-comment-type=\"paramref\" class=\"paramref\">targetType</code>.\n"
  example: []
  syntax:
    content: public GridUnitExtension(string multiplierString, Type targetType)
    parameters:
    - id: multiplierString
      type: System.String
      description: "\nThe value with which the <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize\" data-throw-if-not-resolved=\"false\"></xref>\nwill be multiplied.\n"
    - id: targetType
      type: System.Type
      description: "\nA type to which the unit will be converted, if possible.\n"
    content.vb: Public Sub New(multiplierString As String, targetType As Type)
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.ProvideValue(System.IServiceProvider)
  commentId: M:Celestial.UIToolkit.Xaml.GridUnitExtension.ProvideValue(System.IServiceProvider)
  id: ProvideValue(System.IServiceProvider)
  parent: Celestial.UIToolkit.Xaml.GridUnitExtension
  langs:
  - csharp
  - vb
  name: ProvideValue(IServiceProvider)
  nameWithType: GridUnitExtension.ProvideValue(IServiceProvider)
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.ProvideValue(System.IServiceProvider)
  type: Method
  source:
    remote:
      path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
      branch: docfx
      repo: https://github.com/manuelroemer/Celestial.UIToolkit.git
    id: ProvideValue
    path: src/Celestial.UIToolkit.Core/Xaml/GridUnitExtension.cs
    startLine: 184
  assemblies:
  - Celestial.UIToolkit.Core
  namespace: Celestial.UIToolkit.Xaml
  summary: "\nMultiplies the <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize\" data-throw-if-not-resolved=\"false\"></xref>,\nconverts it to device independent pixels and finally returns that result.\n"
  example: []
  syntax:
    content: public override object ProvideValue(IServiceProvider serviceProvider)
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "\nAn <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> to be used.\nCan be null.\n"
    return:
      type: System.Object
      description: "\nThe <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> which is the result of the grid unit multiplication.\n"
    content.vb: Public Overrides Function ProvideValue(serviceProvider As IServiceProvider) As Object
  overridden: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
  overload: Celestial.UIToolkit.Xaml.GridUnitExtension.ProvideValue*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Windows.Markup.MarkupExtension
  commentId: T:System.Windows.Markup.MarkupExtension
  parent: System.Windows.Markup
  isExternal: true
  name: MarkupExtension
  nameWithType: MarkupExtension
  fullName: System.Windows.Markup.MarkupExtension
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize
  commentId: P:Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize
  isExternal: true
- uid: Celestial.UIToolkit.Xaml
  commentId: N:Celestial.UIToolkit.Xaml
  name: Celestial.UIToolkit.Xaml
  nameWithType: Celestial.UIToolkit.Xaml
  fullName: Celestial.UIToolkit.Xaml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Windows.Markup
  commentId: N:System.Windows.Markup
  isExternal: true
  name: System.Windows.Markup
  nameWithType: System.Windows.Markup
  fullName: System.Windows.Markup
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize*
  commentId: Overload:Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize
  name: DefaultGridCellSize
  nameWithType: GridUnitExtension.DefaultGridCellSize
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Thickness
  commentId: T:System.Windows.Thickness
  parent: System.Windows
  isExternal: true
  name: Thickness
  nameWithType: Thickness
  fullName: System.Windows.Thickness
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString*
  commentId: Overload:Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString
  name: MultiplierString
  nameWithType: GridUnitExtension.MultiplierString
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows
  commentId: N:System.Windows
  isExternal: true
  name: System.Windows
  nameWithType: System.Windows
  fullName: System.Windows
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.TargetType*
  commentId: Overload:Celestial.UIToolkit.Xaml.GridUnitExtension.TargetType
  name: TargetType
  nameWithType: GridUnitExtension.TargetType
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.TargetType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplyWithDip*
  commentId: Overload:Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplyWithDip
  name: MultiplyWithDip
  nameWithType: GridUnitExtension.MultiplyWithDip
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplyWithDip
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize
  commentId: P:Celestial.UIToolkit.Xaml.GridUnitExtension.DefaultGridCellSize
  isExternal: true
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize*
  commentId: Overload:Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize
  name: GridCellSize
  nameWithType: GridUnitExtension.GridCellSize
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.GridCellSize
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension
  commentId: T:Celestial.UIToolkit.Xaml.GridUnitExtension
  name: GridUnitExtension
  nameWithType: GridUnitExtension
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor*
  commentId: Overload:Celestial.UIToolkit.Xaml.GridUnitExtension.#ctor
  name: GridUnitExtension
  nameWithType: GridUnitExtension.GridUnitExtension
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.GridUnitExtension
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString
  commentId: P:Celestial.UIToolkit.Xaml.GridUnitExtension.MultiplierString
  isExternal: true
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  isExternal: true
- uid: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
  commentId: M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
  parent: System.Windows.Markup.MarkupExtension
  isExternal: true
  name: ProvideValue(IServiceProvider)
  nameWithType: MarkupExtension.ProvideValue(IServiceProvider)
  fullName: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
  spec.csharp:
  - uid: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
    name: ProvideValue
    nameWithType: MarkupExtension.ProvideValue
    fullName: System.Windows.Markup.MarkupExtension.ProvideValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)
    name: ProvideValue
    nameWithType: MarkupExtension.ProvideValue
    fullName: System.Windows.Markup.MarkupExtension.ProvideValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: System.IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Celestial.UIToolkit.Xaml.GridUnitExtension.ProvideValue*
  commentId: Overload:Celestial.UIToolkit.Xaml.GridUnitExtension.ProvideValue
  name: ProvideValue
  nameWithType: GridUnitExtension.ProvideValue
  fullName: Celestial.UIToolkit.Xaml.GridUnitExtension.ProvideValue
